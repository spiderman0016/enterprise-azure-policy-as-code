{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#overview","title":"Overview","text":"<p>Enterprise Policy as Code or EPAC for short comprises a number of scripts which can be used in CI/CD based system or a semi-automated use to deploy Policies, Policy Sets, Assignments, Policy Exemptions and Role Assignments.</p>"},{"location":"#terminology","title":"Terminology","text":"Full name Simplified use in this documentation Policy definition(s) Policy, Policies Initiative definition(s) or Policy Set definition(s) Policy Set(s) Policy Assignment(s) of a Policy or Policy Set Assignment(s) Policy Assignment(s) of a Policy Set Policy Set Assignment Policy Exemption(s) Exemption(s) Role Assignment(s)s for Managed Identities required by Policy Assignments Role Assignment(s) Policies, Policy Sets, Assignments and Exemptions Policy resources"},{"location":"#deployment-scripts","title":"Deployment Scripts","text":"<p>Three deployment scripts plan a deployment, deploy Policy resources, and Role Assignments respectively as shown in the following diagram. The solution consumes definition files (JSON and/or CSV files). The planning script (<code>Build-DeploymentPlan</code>) creates plan files (<code>policy-plan.json</code> and <code>roles-plan.json</code>) to be consumed by the two deployment steps (<code>Deploy-PolicyPlan</code> and <code>Deploy-RolesPlan</code>). The scripts require <code>Reader</code>, <code>Contributor</code> and <code>User Access Administrator</code> privileges respectively as indicated in blue text in the diagram. The diagram also shows the usual approval gates after each step/script for prod deployments.</p> <p></p> <p></p>"},{"location":"#cicd-tool-compatibility","title":"CI/CD Tool Compatibility","text":"<p>Since EPAC is based on PowerShell scripts, any CI/CD tool with the ability to execute scripts can be used. The starter kits currently include pipeline definitions for Azure DevOps. Additional starter kits are being implemented and will be added in future releases.</p>"},{"location":"#multi-tenant-support","title":"Multi-Tenant Support","text":"<p>EPAC supports single and multi-tenant deployments from a single source. In most cases you should have a fully or partially isolated area for Policy development and testing, such as a Management Group. An entire tenant can be used; however, it is not necessary since EPAC has sophisticated partitioning capabilities.</p>"},{"location":"#operational-scripts","title":"Operational Scripts","text":"<p>Scripts to simplify operational task are provided. Examples are:</p> <ul> <li><code>Build-PolicyDocumentation</code> generates documentation in markdown and csv formats for Policy Sets and Assignments.</li> <li><code>Create-AzRemediationTasks</code> to bulk remediate non-compliant resources for Policies with <code>DeployIfNotExists</code> or <code>Modify</code> effects.</li> </ul>"},{"location":"#microsofts-security-compliance-for-cloud-infrastructure","title":"Microsoft's Security &amp; Compliance for Cloud Infrastructure","text":"<p>This <code>enterprise-policy-as-code</code> (EPAC) repo has been developed in partnership with the Security &amp; Compliance for Cloud Infrastructure (S&amp;C4CI) offering available from Microsoft's Industry Solutions (Consulting Services). Microsoft Industry Solutions can assist you with securing your cloud. S&amp;C4CI improves your new or existing security posture in Azure by securing platforms, services, and workloads at scale.</p>"},{"location":"#understanding-epac-environments-and-the-pacselector","title":"Understanding EPAC Environments and the pacSelector","text":"<p>Warning</p> <p>EPAC has a concept of an environment identified by a string (unique per repository) called <code>pacSelector</code>. An environment associates the following with the <code>pacSelector</code>:</p> <ul> <li><code>cloud</code> - to select commercial or sovereign cloud environments.</li> <li><code>tenantId</code> - enables multi-tenant scenarios.</li> <li><code>rootDefinitionScope</code> - scope for Policy and Policy Set definitions.</li> </ul> <p>Note: Policy Assignments can only defined at this root scope and child scopes (recursive).</p> <ul> <li>Optional: define <code>desiredState</code></li> </ul> <p>These associations are stored in <code>global-settings.jsonc</code> in an element called <code>pacEnvironments</code>.</p> <p>Like any other software or IaC solution, EPAC needs areas for developing and testing new Policies, Policy Sets and Assignments before any deployment to EPAC prod environments. In most cases you will need one management group hierarchy to simulate EPAC production management groups for development and testing of Policies. EPAC's prod environment will govern all other IaC environments (e.g., sandbox, development, integration, test/qa, pre-prod, prod, ...) and tenants. This can be confusing. We will use EPAC environment(s) and IaC environment(s) to disambiguate the environments.</p> <p>In a centralized single tenant scenario, you will define two EPAC environments: epac-dev and tenant. In a multi-tenant scenario, you will add an additional EPAC environment per additional tenant.</p> <p>The <code>pacSelector</code> is just a name. We highly recommend to call the Policy development environment <code>epac-dev</code>, you can name the EPAC prod environments in a way which makes sense to you in your environment. We use <code>tenant</code>, <code>tenant1</code>, etc in our samples and documentation.</p> <p>These names are used and therefore must match:</p> <ul> <li>Defining the association (<code>pacEnvironments</code>) of an EPAC environment, <code>managedIdentityLocation</code> and <code>globalNotScopes</code> in <code>global-settings.jsonc</code></li> <li>Script parameter when executing different deployment stages in a CI/CD pipeline or semi-automated deployment targeting a specific EPAC environments.</li> <li><code>scopes</code> and <code>notScopes</code> definitions in Policy Assignment JSON files.</li> </ul>"},{"location":"#approach-flexibility","title":"Approach Flexibility","text":""},{"location":"#cicd-scenarios","title":"CI/CD Scenarios","text":"<p>The solution supports any DevOps CI/CD approach you desire. The starter kits assume a GitHub flow approach to branching and CI/CD integration with a standard model below.</p> <ul> <li>Simple</li> <li>Create a feature branch</li> <li>Commits to the feature branch trigger:<ul> <li>Plan and deploy changes to a Policy resources development Management Group or subscription.</li> <li>Create a plan (based on feature branch) for te EPAC production environment(s)/tenant(s).</li> </ul> </li> <li>Pull request (PR) merges trigger:<ul> <li>Plan and deploy from the merged main branch to your EPAC production environment(s) without additional approvals.</li> </ul> </li> <li>Standard - starter kits implement this approach</li> <li>Create a feature branch</li> <li>Commits to the feature branch trigger:<ul> <li>Plan and deploy changes to a Policy resources development Management Group or subscription</li> <li>Create a plan (based on feature branch) for te EPAC production environment(s)/tenant(s).</li> </ul> </li> <li>Pull request (PR) merges trigger:<ul> <li>Plan from the merged main branch to your EPAC production environment(s).</li> </ul> </li> <li>Approval gate for plan deployment is inserted.</li> <li>Deploy the planned changes to environment(s)/tenant(s)<ul> <li>Deploy Policy resources.</li> <li>[Recommended] Approval gate for Role Assignment is inserted.</li> <li>Deploy Role Assignment.</li> </ul> </li> </ul>"},{"location":"#coexistence-and-desired-state-strategy","title":"Coexistence and Desired State Strategy","text":"<p>EPAC is a desired state system. It will remove Policy resources in an environment which are not defined in the definition files. To facilitate transition from previous Policy implementations and coexistence of multiple EPAC and third party Policy as Code systems, a granular way to control such coexistence is implemented. Specifically, EPAC supports:</p> <ul> <li>Centralized: One centralized team manages all Policy resources in the Azure organization, at all levels (Management Group, Subscription, Resource Group). This is the default setup.</li> <li>Distributed: Multiple teams manage Policy resources in a distributed manner. Distributed is also useful during a brownfield deployment scenario to allow for an orderly transition from pre-EPAC to EPAC.</li> </ul> <p>Desired state strategy documentation can be found here.</p> <p>Warning</p> <p>If you have a existing Policies, Policy Sets, Assignments, and Exemptions in your environment, you have not transferred to EPAC, do not forget to include the new <code>desiredState</code> element with a <code>strategy</code> of <code>ownedOnly</code>. This is the equivalent of the deprecated \"brownfield\" variable in the pipeline. The default <code>strategy</code> is <code>full</code>.</p> <ul> <li><code>full</code> deletes any Policies, Policy Sets, Assignments, and Exemptions not deployed by this EPAC solution or another EPAC solution.</li> <li><code>ownedOnly</code> deletes only Policies with this repos\u2019s pacOwnerId. This allows for a gradual transition from your existing Policy management to Enterprise Policy as Code.</li> </ul> <p>Policy resources with another pacOwnerId metadata field are never deleted.</p>"},{"location":"#reading-list","title":"Reading List","text":"<ul> <li>Setup DevOps Environment .</li> <li>Create a source repository and import the source code from this repository.</li> <li>Select the desired state strategy</li> <li>Define your deployment environment in <code>global-settings.jsonc</code>.</li> <li>Build your CI/CD pipeline using a starter kit.</li> <li>Optional: generate a starting point for the <code>Definitions</code> folders:</li> <li>Extract existing Policy resources from an environment.</li> <li>Import Policies from the Cloud Adoption Framework.</li> <li>Add custom Policies.</li> <li>Add custom Policy Sets.</li> <li>Create Policy Assignments.</li> <li>Import Policies from the Cloud Adoption Framework.</li> <li>Manage Policy Exemptions.</li> <li>Document your deployments.</li> <li>Execute operational tasks.</li> </ul>"},{"location":"breaking-changes-v6.0/","title":"Breaking changes in v6.0","text":""},{"location":"breaking-changes-v6.0/#changed-az-cli-to-az-powershell-modules","title":"Changed az cli to Az PowerShell Modules","text":"<p>To increase execution speed and pipeline uniformity:</p> <ul> <li>Replaced az cli usage with faster Resource Graph queries and AZ PowerShell Modules.</li> <li>Simplified the cmdlets naming.</li> <li>Simplified parameters</li> <li>Removed -SuppressDeletes flag</li> <li>Changed handling of plan files</li> <li>Support to write pipeline variables for GitLab</li> </ul> <p>Change pipeline definition:</p> <ul> <li>Change usage of task: <code>AzureCLI@2</code> to task: <code>AzurePowerShell@5</code>. Use <code>-devOpsType \"ado\"</code> for Azure DevOps or <code>-devOpsType \"gitlab\"</code> for Gitlab pipelines.</li> </ul> <pre><code>    - task: AzurePowerShell@5\n      name: planStep\n      displayName: Plan\n      inputs:\n        azureSubscription: $(devServiceConnection)\n        pwsh: true\n        azurePowerShellVersion: LatestVersion\n        ScriptPath: \"Scripts/Deploy/Build-DeploymentPlans.ps1\"\n        ScriptArguments:\n          -pacEnvironmentSelector $(pacEnvironmentSelector) `\n          -devOpsType \"ado\" `\n          -InformationAction Continue\n</code></pre> <ul> <li>Changed command line arguments as needed</li> <li>Change command names in pipeline definition</li> <li><code>Build-AzPoliciesInitiativesAssignmentsPlan.ps1</code> to <code>Build-DeploymentPlans.ps1</code></li> <li><code>Deploy-AzPoliciesInitiativesAssignmentsFromPlan.ps1</code> to <code>Deploy-PolicyPlan.ps1</code></li> <li><code>Set-AzPolicyRolesFromPlan.ps1</code> to <code>Deploy-RolesPlan.ps1</code></li> <li>Fix the artifact up/downloads occurrences by replacing the publish and artifact line items with:</li> </ul> <pre><code>    - publish: \"$(PAC_OUTPUT_FOLDER)/plans-$(pacEnvironmentSelector)\"\n      artifact: \"plans-$(pacEnvironmentSelector)\"\n      condition: and(succeeded(), or(eq(variables['planStep.deployPolicyChanges'], 'yes'), eq(variables['planStep.deployRoleChanges'], 'yes')))\n</code></pre>"},{"location":"breaking-changes-v6.0/#recommendation-to-simplify-github-flow","title":"Recommendation to Simplify GitHub Flow","text":"<p>We have found that the additional test environment after a Pull Request merge does not lead to finding problems; therefore, we removed that stage from the starter kit pipelines as seen in our CI/CD Pipeline documentation.</p>"},{"location":"breaking-changes-v6.0/#renamed-definitions-folders","title":"Renamed <code>Definitions</code> Folders","text":"<p>Renamed definition folders to match Microsoft's standard naming in our Policy repo on GitHub. Rename the folders in your repo to:</p> <ul> <li>policyDefinitions</li> <li>policySetDefinitions</li> <li>policyAssignments</li> <li>policyExemptions</li> <li>policyDocumentations</li> </ul>"},{"location":"breaking-changes-v6.0/#replaced-suppressdelete-switch-with-desired-state-handling","title":"Replaced <code>-SuppressDelete</code> Switch with Desired State Handling","text":"<p>As part of the support for multiple EPAC (and other PaC) solutions to manage Policy in a tenant(s), we changed our approach to \"brownfield\" scenarios. The setting has moved to <code>global-settings.jsonc</code>.</p> <p>Remove the command line switch <code>-SuppressDelete</code> in the pipeline and the <code>brownfield</code> variable. The equivalent in <code>global-settings.jsonc</code> is:</p> <pre><code>\"desiredState\":\n{\n  \"strategy\": \"ownedOnly\"\n}\n</code></pre>"},{"location":"breaking-changes-v6.0/#replaced-includeresourcegroups-switch-with-desired-state-handling","title":"Replaced <code>-IncludeResourceGroups</code> Switch with Desired State Handling","text":"<p>As part of the support for multiple EPAC (and other PaC) solutions to manage Policy in a tenant(s), we changed our approach to including resource groups in desired state. Without any modifications, Resource Group level assignments are not managed by EPAC to preserve previous behavior.</p> <p>Remove the command line switch <code>-IncludeResourceGroups</code> in the pipeline. The equivalent in <code>global-settings.jsonc</code> is:</p> <pre><code>\"desiredState\": {\n    \"includeResourceGroups\": true,\n}\n</code></pre>"},{"location":"breaking-changes-v6.0/#multiple-changes-in-global-settingsjsonc","title":"Multiple Changes in <code>global-settings.jsonc</code>","text":"<ul> <li>Simplify and clarify <code>\"rootScope\"</code> definition by replaceing <code>\"rootScope\": { \"ManagementGroupName\": \"my-mg\"}</code> with <code>\"deploymentRootScope\": \"/providers/Microsoft.Management/managementGroups/my-mg\"</code>.</li> <li>Removed requirement to have a default subscription. Remove <code>\"defaultSubscriptionId\"</code> element from <code>global-settings.jsonc</code>.</li> <li>Support for multiple EPAC (and other PaC) solutions to manage Policy. Add required <code>\"pacOwnerId\": \"e6581a31-51a3-4dc6-806d-2541dc251d31\"</code>.</li> <li>Add element for desired state handling as needed.</li> </ul>"},{"location":"breaking-changes-v6.0/#centralized-documentation-in-docs-folder","title":"Centralized Documentation in Docs folder","text":"<p>Instead of README.md files in multiple folders, move all content from <code>README.md</code> files not at the solution root to the <code>Docs</code> folder.</p> <p>Remove <code>README.md</code> files in folders (and subfolders) <code>Pipeline</code>, <code>Definitions</code>, and <code>Scripts</code>.</p>"},{"location":"breaking-changes-v6.0/#microsoft-breaking-change-in-implementation-of-get-azroleassignment","title":"Microsoft Breaking Change in Implementation of  <code>Get-AzRoleAssignment</code>","text":"<p>The implementation was changed from Azure AD to MS Graph API impacting the roles requirements for the cmdlet. This changed the implementation of <code>New-AzPolicyReaderRole.ps1</code>. Add required <code>MS Graph</code> permissions for the pipeline service connections.</p>"},{"location":"breaking-changes-v6.0/#reading-list","title":"Reading List","text":"<ul> <li>Setup DevOps Environment .</li> <li>Create a source repository and import the source code from this repository.</li> <li>Select the desired state strategy</li> <li>Define your deployment environment in <code>global-settings.jsonc</code>.</li> <li>Build your CI/CD pipeline using a starter kit.</li> <li>Optional: generate a starting point for the <code>Definitions</code> folders:</li> <li>Extract existing Policy resources from an environment.</li> <li>Import Policies from the Cloud Adoption Framework.</li> <li>Add custom Policies.</li> <li>Add custom Policy Sets.</li> <li>Create Policy Assignments.</li> <li>Import Policies from the Cloud Adoption Framework.</li> <li>Manage Policy Exemptions.</li> <li>Document your deployments.</li> <li>Execute operational tasks.</li> </ul>"},{"location":"ci-cd-pipeline/","title":"CI/CD Pipeline","text":"<p>This repository contains starter pipeline definitions for Azure DevOps. The authors are interested in supporting other deployment pipelines. If you have developed pipelines for other technologies, such as GitHub, Jenkins, etc., please contribute them to the project as additional starter kits</p>"},{"location":"ci-cd-pipeline/#simplified-github-flow-for-policy-as-code","title":"Simplified GitHub Flow for Policy as Code","text":"<p>The diagram below shows the use of GitHub Flow in Policy as Code. Builds are triggered for Commits, optionally for Pull Requests and for successful main branch merges.</p> <p></p>"},{"location":"ci-cd-pipeline/#service-connections-for-devops-cicd","title":"Service connections for DevOps CI/CD","text":"<p>Create Service Principals for the pipeline execution and setup your DevOps environment with the necessary service connections. You will need SPNs with specific roles as shown below.</p> <ul> <li>Single tenant pipeline service connections.</li> <li>Multi tenant pipeline service connections.</li> </ul> <p>When creating a Service Connection in Azure DevOps you can set up the service connections on a Subscription or a Management Group scope level. If you are using subscriptions to simulate a hierarchy during EPAC development, configure the service connection(s) scope level as Subscription. When creating a Service Connections for management groups (any EPAC environments) Deployment and EPAC Role Assignment the service connection scope level is Management Group.</p> Subscription scope level Management Group scope level"},{"location":"ci-cd-pipeline/#single-tenant-pipeline","title":"Single Tenant Pipeline","text":""},{"location":"ci-cd-pipeline/#single-tenant-stages","title":"Single Tenant Stages","text":"Stage Purpose Trigger Scripts devStage Feature branch DEV environment build, deploy and test CI, Manual Build-DeploymentPlans.ps1  Deploy-PolicyPlan.ps1  Deploy-RolesPlan.ps1 tenantPlanFeatureStage Feature branch based plan for prod deployment CI, Manual Build-DeploymentPlans.ps1 tenantPlanMainStage Main branch based plan for prod deployment PR Merged, Manual Build-DeploymentPlans.ps1 tenantDeployStage Deploy Policies defined by Main branch based plan Prod stage approved Deploy-PolicyPlan.ps1 tenantRolesStage Assign roles defined by Main branch based plan Role stage approved Deploy-RolesPlan.ps1"},{"location":"ci-cd-pipeline/#single-tenant-service-connections-and-roles","title":"Single Tenant Service Connections and Roles","text":"<p>Create Service Principals and associated service connections in Azure DevOps or the equivalent in your CI/CD tool. The SPNs require the following roles to adhere to the least privilege principle. If you have a single tenant, remove the last column and rows with connections ending in \"-2\".</p> Connection Stages MG: epac-dev-mg MG: Tenant Root sc-pac-dev devStage Owner  Graph Permissions sc-pac-plan tenantPlanFeatureStage  tenantPlanMainStage EPAC Policy Reader Graph Permissions sc-pac-prod tenantDeployStage Policy Contributor sc-pac-roles tenantRolesStage-1 User Access Administrator"},{"location":"ci-cd-pipeline/#multi-tenant-pipeline","title":"Multi Tenant Pipeline","text":""},{"location":"ci-cd-pipeline/#multi-tenant-stages","title":"Multi Tenant Stages","text":"Stage Purpose Trigger Scripts devStage Feature branch EPAC DEV environment build, deploy and test CI, Manual Build-DeploymentPlans.ps1  Deploy-PolicyPlan.ps1  Deploy-RolesPlan.ps1 tenantPlanFeatureStage-1 Feature branch based plan for prod deployment (tenant 1) CI, Manual Build-DeploymentPlans.ps1 tenantPlanMainStage-1 Main branch based plan for prod deployment (tenant 1) PR Merged, Manual Build-DeploymentPlans.ps1 tenantDeployStage-1 Deploy Policies defined by Main branch based plan (tenant 1) Prod stage approved Deploy-PolicyPlan.ps1 tenantRolesStage-1 Assign roles defined by Main branch based plan (tenant 1) Role stage approved Deploy-RolesPlan.ps1 tenantPlanFeatureStage-2 Feature branch based plan for prod deployment (tenant 2) CI, Manual Build-DeploymentPlans.ps1 tenantPlanMainStage-2 Main branch based plan for prod deployment (tenant 2) PR Merged, Manual Build-DeploymentPlans.ps1 tenantDeployStage-2 Deploy Policies defined by Main branch based plan (tenant 2) Prod stage approved Deploy-PolicyPlan.ps1 tenantRolesStage-2 Assign roles defined by Main branch based plan (tenant 2) Role stage approved Deploy-RolesPlan.ps1 completedFeature Empty stage to complete feature branch None None"},{"location":"ci-cd-pipeline/#multi-tenant-service-connections-and-roles","title":"Multi Tenant Service Connections and Roles","text":"<p>Create Service Principals and associated service connections in Azure DevOps or the equivalent in your CI/CD tool. The SPNs require the following roles to adhere to the least privilege principle. If you have a single tenant, remove the last column and rows with connections ending in \"-2\".</p> Connection Stages MG: epac-dev-mg MG: Tenant 1 Root MG: Tenant 2 Root sc-pac-dev devStage Owner  Graph Permissions sc-pac-plan-1 tenantPlanFeatureStage-1  tenantPlanMainStage-1 EPAC Policy Reader Graph Permissions sc-pac-plan-2 tenantPlanFeatureStage-2  tenantPlanMainStage-2 EPAC Policy Reader Graph Permissions sc-pac-prod-1 tenantDeployStage-1 Policy Contributor sc-pac-prod-2 tenantDeployStage-2 Policy Contributor sc-pac-roles-1 tenantRolesStage-1 User Access Administrator sc-pac-roles-2 tenantRolesStage-2 User Access Administrator none completedPlanFeatureStage"},{"location":"ci-cd-pipeline/#role-assignments-for-cicd-spns","title":"Role Assignments for CI/CD SPNs","text":"<p>Breaking change: For the planning stages, the SPN used must use a simpler reader role definition and have MS Graph permissions.</p>"},{"location":"ci-cd-pipeline/#ms-graph-permissions","title":"MS Graph permissions","text":"<p>EPAC uses <code>Get-AzRoleAssignment</code> to retrieve role assignments. Microsoft has recently changed the internals from using the deprecated AAD API to use MS Graph. MS Graph queries are more complex and improve security. The cmdlet may call the following Microsoft Graph API according to input parameters:</p> <ul> <li>GET /users/{id}</li> <li>GET /servicePrincipals/{id}</li> <li>GET /groups/{id}</li> <li>GET /directoryObjects/{id}</li> <li>POST /directoryObjects/getByIds</li> </ul> <p>You must assign these MS Graph <code>Application permissions</code> corresponding to the above APIs:-</p> <ul> <li>User.Read.All</li> <li>ServicePrincipalEndpoint.Read.All</li> <li>Group.Read.All</li> <li>Directory.Read.All</li> </ul> <p>After you configure the Permissions (<code>Add a permission</code>), you must <code>Grant admin consent for ...</code>. The result in Azure AD portal looks like this:</p> <p></p> <p>Read the following Microsoft instructions to learn more about MS Graph Application Permissions</p> <ol> <li>Register your app</li> <li>Configure permissions for Microsoft Graph</li> <li>Get administrator consent</li> </ol>"},{"location":"ci-cd-pipeline/#custom-epac-resource-policy-reader-role","title":"Custom EPAC Resource Policy Reader Role","text":"<p>EPAC uses a set of Service Principals to execute the Plan phase which do not require as many rights as those that deploy policy assets into Azure. In version 6, we introduced a breaking change that leveraged MS Graph API to retrieve information about the current Azure configuration. This both improves performance, and moves us to the replacement technology for the older Azure Graph API. The addition of Microsoft.Graph/Operations/read is the change which enables this functionality.</p> <p>The list of roles, and their descriptions is available online here.</p> <pre><code>{\n    \"properties\": {\n        \"roleName\": \"EPAC Resource Policy Reader\",\n        \"description\": \"Provides read access to all Policy resources for the purpose of planning the EPAC deployments.\",\n        \"assignableScopes\": [\n            \"/\"\n        ],\n        \"permissions\": [\n            {\n                \"actions\": [\n                    \"Microsoft.Authorization/policySetDefinitions/read\",\n                    \"Microsoft.Authorization/policyAssignments/read\",\n                    \"Microsoft.Authorization/policyDefinitions/read\",\n                    \"Microsoft.Authorization/policyExemptions/read\",\n                    \"Microsoft.PolicyInsights/*\",\n                    \"Microsoft.Management/register/action\"\n                ],\n                \"notActions\": [],\n                \"dataActions\": [],\n                \"notDataActions\": []\n            }\n        ]\n    }\n}\n</code></pre> <p>Operations script <code>New-AzPolicyReaderRole.ps1</code> creates the role assignment with the above settings.</p>"},{"location":"ci-cd-pipeline/#azure-devops-pipeline","title":"Azure DevOps Pipeline","text":""},{"location":"ci-cd-pipeline/#service-connections","title":"Service Connections","text":"<p>Service connections give the pipeline the proper permissions to deploy at desired Azure scopes. Refer to the following documentation:  https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops&amp;tabs=yaml.</p>"},{"location":"ci-cd-pipeline/#deployment-environments","title":"Deployment Environments","text":"<p>Create distinct ADO environment to configure approval gates. Refer to the following documentation:  https://docs.microsoft.com/en-us/azure/devops/pipelines/process/environments?view=azure-devops</p>"},{"location":"ci-cd-pipeline/#deployment-scripts","title":"Deployment Scripts","text":"<p>While this script intended to be used, they can be run manually to create a semi-automated EPAC solution. This is useful:</p> <ul> <li>CI/CD environment is not yet available</li> <li>Debugging the scripts from Visual Studio Code (or other IDE)</li> </ul> <p></p>"},{"location":"ci-cd-pipeline/#common-script-parameters","title":"Common Script Parameters","text":"Parameter Required Explanation <code>pacEnvironmentSelector</code> Optional Selects the EPAC environment for this plan. If omitted, interactively prompts for the value. <code>definitionsRootFolder</code> Optional Definitions folder path. Defaults to environment variable <code>$env:PAC_DEFINITIONS_FOLDER</code> or <code>./Definitions</code>. It must contain file <code>global-settings.jsonc</code>. <code>interactive</code> Optional Defaults to <code>$false</code>."},{"location":"ci-cd-pipeline/#build-deploymentplansps1","title":"Build-DeploymentPlans.ps1","text":"<p>Analyzes changes in Policy definition, Policy Set definition, and Policy Assignment files. It calculates a plan to apply deltas. The deployment scripts are declarative and idempotent: this means, that regardless how many times they are run, they always push all changes that were implemented in the JSON files to the Azure environment, i.e. if a JSON file is newly created/updated/deleted, the pipeline will create/update/delete the Policy and/or Policy Set and/or Policy Assignments definition in Azure. If there are no changes, the pipeline can be run any number of times, as it won't make any changes to Azure.</p> <p>In addition to the common parameters, these parameters are defined:</p> Parameter Required Explanation <code>outputFolder</code> Optional Output folder path for plan files. Defaults to environment variable <code>$env:PAC_OUTPUT_FOLDER</code> or <code>./Output</code>. <code>devOpsType</code> Optional If set, outputs variables consumable by conditions in a DevOps pipeline. Default: not set."},{"location":"ci-cd-pipeline/#deploy-policyplanps1","title":"Deploy-PolicyPlan.ps1","text":"<p>Deploys Policies, Policy Sets, Policy Assignments, and Policy Exemptions at their desired scope based on the plan.</p> Parameter Required Explanation <code>inputFolder</code> Optional Input folder path for plan files. Defaults to environment variable <code>$env:PAC_INPUT_FOLDER</code>, <code>$env:PAC_OUTPUT_FOLDER</code> or <code>./Output</code>."},{"location":"ci-cd-pipeline/#deploy-rolesplanps1","title":"Deploy-RolesPlan.ps1","text":"<p>Creates the role assignments for the Managed Identities required for <code>DeployIfNotExists</code> and <code>Modify</code> Policies.</p> Parameter Required Explanation <code>inputFolder</code> Optional Input folder path for plan files. Defaults to environment variable <code>$env:PAC_INPUT_FOLDER</code>, <code>$env:PAC_OUTPUT_FOLDER</code> or <code>./Output</code>."},{"location":"ci-cd-pipeline/#consuming-excel-files","title":"Consuming Excel Files","text":"<p>Exemptions and assignments can use JSON, CSV and Excel (.xlsx) files. Support for Excel files uses a third-party PowerShell module from the PowerShell Gallery. However, the StarterKit pipeline disables the use of .xslx files module (<code>Convert-XlsToCSV.ps1</code>) as this utilizes third party software, which may or may not be permissable in the deployed environment due to supply chain risk mitigation rules. This does not imply any such vulnerabilities exist, and the project can be reviewed for appropriateness for your environment at ImportExcel on Github. You may enable it at your own risk by uncommenting the sections in each planning stage. The pipeline further mitigates the risk by executing this step without Azure credentials.</p> <pre><code>  - task: PowerShell@2\n    displayName: Convert Excel (.xlsx) to CSV\n    inputs:\n      pwsh: true\n      filePath: \"Scripts/Deploy/Convert-XlsToCsv.ps1\"\n</code></pre>"},{"location":"ci-cd-pipeline/#pipeline-execution","title":"Pipeline Execution","text":"<p>In Azure Devops pipelines the following happens. Your CI/CD tools will display progress differently.</p>"},{"location":"ci-cd-pipeline/#commit-to-a-feature-branch-or-a-manual-pipeline-run","title":"<code>Commit</code> to a feature branch or a manual pipeline run","text":"<ul> <li>Stage devStage to deploy Policies, Policy Sets and Policy Assignments to the PAC DEV environment.</li> <li>Calculates the plan for PROD environment deployment based on the Feature branch.</li> <li>This plan is never executed. Instead the logs and if desired the artifact generated are used by the developer to verify the definition files and to determine if the code is ready for a Pull Request.</li> <li>The PR approver(s) will use the same input plus the source code changes to decide the PR approval or rejection.</li> </ul> <p>Detail view:</p> <p></p>"},{"location":"ci-cd-pipeline/#pull-request-is-approved-and-branch-merged-into-main","title":"<code>Pull Request</code> is approved and branch merged into main","text":"<ul> <li>Calculates the plan for PROD environment deployment based on the merged Main branch.</li> <li>The pipeline stops for PROD gate(s) approval at this time.</li> <li>The logs and if desired the artifacts generated are used by the PROD gate(s) approver(s) to decide on the PROD stage approval(s) or rejection(s).</li> <li></li> <li></li> <li>After the approval deployments to PROD will begin.</li> <li>Optional a second approval before role assignments is required.</li> <li></li> <li>After the ntire run the overview page looks like this:</li> <li></li> </ul>"},{"location":"ci-cd-pipeline/#no-changes","title":"No changes","text":"<ul> <li>Deployment steps and stages are skipped. Skipped stages do not need approvals.</li> <li></li> </ul>"},{"location":"ci-cd-pipeline/#reading-list","title":"Reading List","text":"<ul> <li>Setup DevOps Environment .</li> <li>Create a source repository and import the source code from this repository.</li> <li>Select the desired state strategy</li> <li>Define your deployment environment in <code>global-settings.jsonc</code>.</li> <li>Build your CI/CD pipeline using a starter kit.</li> <li>Optional: generate a starting point for the <code>Definitions</code> folders:</li> <li>Extract existing Policy resources from an environment.</li> <li>Import Policies from the Cloud Adoption Framework.</li> <li>Add custom Policies.</li> <li>Add custom Policy Sets.</li> <li>Create Policy Assignments.</li> <li>Import Policies from the Cloud Adoption Framework.</li> <li>Manage Policy Exemptions.</li> <li>Document your deployments.</li> <li>Execute operational tasks.</li> </ul>"},{"location":"clone-github/","title":"GitHub repository: How to clone or fork, update and contribute","text":"<p>Git lacks a capability to ignore files/directories during a PR only. This repo has been organized so that Definitions and Pipeline folders are not touched by syncing latest update from GitHub to your repo or reverse syncing to contribute to the project.</p>"},{"location":"clone-github/#setting-up-your-repo","title":"Setting up your Repo","text":"<ol> <li>Initial setup<ol> <li>Create <code>MyForkRepo</code> as a fork of GitHub repo.</li> <li>Create <code>MyWorkingRepo</code>.         1. Clone your forked repo.         1. Create a new repo from the clone (do not fork <code>MyForkRepo</code>)</li> </ol> </li> <li>Work in <code>MyWorkingRepo</code><ol> <li>While the root folder is not modified as part of the Sync-Repo process, it is recommended that this part of the file structure not be used for storage of any custom material other than new folders.<ol> <li>You may add additional folders, such as a folder for your own operational scripts.</li> </ol> </li> <li>Use only folders <code>Definitions</code> and <code>Pipeline</code>, except when working on fixes to be contributed back to GitHub.<ol> <li>Review the <code>Sync-Repo.ps1</code> documentation for additional information on the folders which are destroyed and recreated as part of the version upgrade process for additional insight on this topic.</li> </ol> </li> </ol> </li> </ol>"},{"location":"clone-github/#syncing-latest-version-from-github-repo","title":"Syncing latest Version from GitHub repo","text":"<ol> <li>Fetch changes from GitHub to <code>MyForkRepo</code>.</li> <li>Execute <code>Sync-Repo.ps1</code> to copy files from <code>MyForkRepo</code> to <code>MyWorkingRepo</code> feature branch.</li> <li>PR <code>MyWorkingRepo</code> feature branch.</li> </ol>"},{"location":"clone-github/#contribute-to-github","title":"Contribute to GitHub","text":"<ol> <li>Execute <code>Sync-Repo.ps1</code> to copy files from <code>MyWorkingRepo</code> to <code>MyForkRepo</code> feature branch.<ol> <li>Be sure not to copy internal references within your files during your sync to MyForkRepo.</li> </ol> </li> <li>PR <code>MyForkRepo</code> feature branch.</li> <li>PR changes in your fork (<code>MyForkRepo</code>) to GitHub.</li> <li>GitHub maintainers will review the PR.</li> </ol>"},{"location":"clone-github/#sync-repops1","title":"Sync-Repo.ps1","text":"<p>The repo contains a script to synchronize directories in both directions: <code>Sync-Repo.ps1</code>. It only works if you do not modify:</p> <ul> <li><code>Docs</code>, <code>Scripts</code> and <code>StarterKit</code> directories</li> <li><code>CODE_OF_CONDUCT.md</code>, <code>LICENSE</code>, <code>README.md</code> (this file), <code>SECURITY.md</code>, <code>SUPPORT.md</code> and <code>Sync-Repo.ps1</code> in root folder</li> </ul> Parameter Required Explanation <code>sourceDirectory</code> Required Directory with the source (forked repo) <code>destinationDirectory</code> Required Directory with the destination (your private repo) <code>suppressDeleteFiles</code> Optional Switch parameter to suppress deleting files in <code>$destinationDirectory</code> tree"},{"location":"clone-github/#reading-list","title":"Reading List","text":"<ul> <li>Setup DevOps Environment .</li> <li>Create a source repository and import the source code from this repository.</li> <li>Select the desired state strategy</li> <li>Define your deployment environment in <code>global-settings.jsonc</code>.</li> <li>Build your CI/CD pipeline using a starter kit.</li> <li>Optional: generate a starting point for the <code>Definitions</code> folders:</li> <li>Extract existing Policy resources from an environment.</li> <li>Import Policies from the Cloud Adoption Framework.</li> <li>Add custom Policies.</li> <li>Add custom Policy Sets.</li> <li>Create Policy Assignments.</li> <li>Import Policies from the Cloud Adoption Framework.</li> <li>Manage Policy Exemptions.</li> <li>Document your deployments.</li> <li>Execute operational tasks.</li> </ul>"},{"location":"cloud-adoption-framework/","title":"Cloud Adoption Framework Policies","text":""},{"location":"cloud-adoption-framework/#rationale","title":"Rationale","text":"<p>Microsoft publishes and maintains a list of Policies, Policy Sets and Assignments which are deployed as part of the Cloud Adoption Framework Azure Landing Zones deployment. The central repository that contains these policies acts as the source of truth for ALZ deployments via the portal, Bicep and Terraform. A current list of policies which are deployed using these solutions is found at this link.</p> <p>To enable customers to use the Enterprise Policy as Code solution and combine Microsoft's policy recommendations there is a script which will pull the Policies, Policy Sets and Policy Assignments from the central repository and allow you to deploy them using this solution.</p> <p>As the policies and assignments change in main repository the base files in this solution can be updated to match.</p>"},{"location":"cloud-adoption-framework/#sync-script","title":"Sync Script","text":"<p>The script located at <code>Scripts\\CloudAdoptionFramework\\Sync-CAFPolicies.ps1</code> will synchronise the policies from the upstream repository. You should ensure that you are keeping the main repository in sync with the project fork to ensure that any changes to this script are reflected accurately.</p> <pre><code>.\\Scripts\\CloudAdoptionFramework\\Sync-CAFPolicies.ps1 [[-DefinitionsRootFolder] &lt;string&gt;]\n</code></pre> <p>Specifying the <code>DefinitionsRootFolder</code> parameter allows to you sync the policies to a different folder. This may be preferable when running yhe script periodically to sync in changes.</p>"},{"location":"cloud-adoption-framework/#update-assignment-scopes","title":"Update Assignment Scopes","text":"<p>Each assignment file has a default scope assigned to it - this need to be updated to reflect your environment and <code>global-settings.jsonc</code> file.</p> <p>For example:</p> <pre><code>{\n    \"nodeName\": \"/Root/\",\n    \"scope\": {\n        \"tenant1\": [\n            \"/providers/Microsoft.Management/managementGroups/toplevelmanagementgroup\"\n        ]\n    },\n    \"parameters\": {\n        \"logAnalytics\": \"\",\n        \"logAnalytics_1\": \"\",\n        \"emailSecurityContact\": \"\",\n        \"ascExportResourceGroupName\": \"\",\n        \"ascExportResourceGroupLocation\": \"\"\n    }\n</code></pre> <p>If my top level management group had an ID of contoso I and my PAC environments specified a production environment I would need to update the block as below.</p> <pre><code>{\n    \"nodeName\": \"/Root/\",\n    \"scope\": {\n        \"production\": [\n            \"/providers/Microsoft.Management/managementGroups/contoso\"\n        ]\n    },\n    \"parameters\": {\n        \"logAnalytics\": \"\",\n        \"logAnalytics_1\": \"\",\n        \"emailSecurityContact\": \"\",\n        \"ascExportResourceGroupName\": \"\",\n        \"ascExportResourceGroupLocation\": \"\"\n    }\n</code></pre> <p>Each assignment file corresponds to a management group deployed as part of the CAF Azure Landing Zone management group structure.</p>"},{"location":"cloud-adoption-framework/#update-assignment-parameters","title":"Update Assignment Parameters","text":"<p>Several of the assignment files also have parameters which need to be in place. Pay attention to the requirements about having a Log Analytics workspace deployed prior to assigning these policies as it is a requirement for several of the assignments. Less generic parameters are also available for modification in the assignment files.</p>"},{"location":"cloud-adoption-framework/#reading-list","title":"Reading List","text":"<ul> <li>Setup DevOps Environment .</li> <li>Create a source repository and import the source code from this repository.</li> <li>Select the desired state strategy</li> <li>Define your deployment environment in <code>global-settings.jsonc</code>.</li> <li>Build your CI/CD pipeline using a starter kit.</li> <li>Optional: generate a starting point for the <code>Definitions</code> folders:</li> <li>Extract existing Policy resources from an environment.</li> <li>Import Policies from the Cloud Adoption Framework.</li> <li>Add custom Policies.</li> <li>Add custom Policy Sets.</li> <li>Create Policy Assignments.</li> <li>Import Policies from the Cloud Adoption Framework.</li> <li>Manage Policy Exemptions.</li> <li>Document your deployments.</li> <li>Execute operational tasks.</li> </ul>"},{"location":"definitions-and-global-settings/","title":"Definitions and Global Settings","text":""},{"location":"definitions-and-global-settings/#folders","title":"Folders","text":"<p>This <code>Definitions</code> folder and subfolders contains all your definitions. The <code>Sync-Repo.ps1</code> script does not copy this folder.</p> <ol> <li>Define the Azure environment(s) in file global-settings.jsonc</li> <li>Create custom Policies (optional) in folder policyDefinitions</li> <li>Create custom Policy Sets (optional) in folder policySetDefinitions</li> <li>Define the Policy Assignments in folder policyAssignments</li> <li>Define the Policy Exemptions (optional) in folder policyExemptions</li> <li>Define Documentation in folder policyDocumentations</li> </ol>"},{"location":"definitions-and-global-settings/#global-settings","title":"Global Settings","text":"<p><code>global-settings.jsonc</code> has following sections explained below:</p> <ul> <li><code>pacOwnerId</code> uniquely identifies deployments from a specific repo. We recommend using a GUID.</li> <li><code>pacEnvironments</code> defines the EPAC environments.</li> <li><code>managedIdentityLocations</code> is used in Policy Assignments as the location of the created Managed Identities.</li> <li><code>globalNotScopes</code> defines scopes not subject to the Policy Assignments.</li> </ul>"},{"location":"definitions-and-global-settings/#uniquely-identify-deployments-pacownerid","title":"Uniquely identify deployments <code>pacOwnerId</code>","text":"<p><code>pacOwnerId</code> is required for desired state handling to distinguish Policy resources deployed via this EPAC repo, legacy technology, another EPAC repo, or another Policy as Code solution.</p>"},{"location":"definitions-and-global-settings/#define-epac-environments-in-pacenvironments","title":"Define EPAC Environments in <code>pacEnvironments</code>","text":"<p>EPAC has a concept of an environment identified by a string (unique per repository) called <code>pacSelector</code> as defined in <code>pacEnvironments</code>. An environment associates the following with the <code>pacSelector</code>:</p> <ul> <li><code>cloud</code> - to select sovereign cloud environments.</li> <li><code>tenantId</code> - enables multi-tenant scenarios.</li> <li><code>rootDefinitionScope</code> - the deployment scope for the Policies and Policy Sets to be used in assignments later.</li> <li>Policy Assignments can only defined at this scope and child scopes (recursive).</li> <li>Operational tasks, such as <code>Create-AzRemediationTasks.ps1</code>, must use the same <code>rootDefinitionScope</code> or they will fail.</li> <li>Optional: define <code>desiredState</code> strategy. This element is documented here.</li> </ul> <p>Like any other software or IaC solution, EPAC needs areas for developing and testing new Policies, Policy Sets and Policy Assignments before any deployment to EPAC prod environments. In most cases you will need one management group hierarchy to simulate EPAC production management groups for development and testing of Policies. EPAC's prod environment will govern all other IaC environments (e.g., sandbox, development, integration, test/qa, pre-prod, prod, ...) and tenants. This can be confusing. We will use EPAC environment(s) and IaC environments to disambiguate the environments.</p> <p>In a centralized single tenant scenario, you will define two EPAC environments: epac-dev and tenant. In a multi-tenant scenario, you will add an additional EPAC environment per additional tenant.</p> <p>The <code>pacSelector</code> is just a name. We highly recommend to call the Policy development environment <code>epac-dev</code>, you can name the EPAC prod environments in a way which makes sense to you in your environment. We use <code>tenant</code>, <code>tenant1</code>, etc in our samples and documentation. These names are used and therefore must match:</p> <ul> <li>Defining the association (<code>pacEnvironments</code>) of an EPAC environment, <code>managedIdentityLocation</code> and <code>globalNotScopes</code> in <code>global-settings.jsonc</code></li> <li>Script parameter when executing different deployment stages in a CI/CD pipeline or semi-automated deployment targeting a specific EPAC environments.</li> <li><code>scopes</code>, <code>notScopes</code>, <code>additionalRoleAssignments</code>, <code>managedIdentityLocations</code>, and <code>userAssignedIdentity</code> definitions in Policy Assignment JSON files.</li> </ul> <pre><code>\"pacEnvironments\": [\n    {\n        \"pacSelector\": \"epac-dev\",\n        \"cloud\": \"AzureCloud\",\n        \"tenantId\": \"70238025-b3dc-40a5-bea1-314973cea2db\",\n        \"deploymentRootScope\": \"/providers/Microsoft.Management/managementGroups/PAC-Heinrich-Dev\"\n    },\n    {\n        \"pacSelector\": \"tenant\",\n        \"cloud\": \"AzureCloud\",\n        \"tenantId\": \"70238025-b3dc-40a5-bea1-314973cea2db\",\n        \"deploymentRootScope\": \"/providers/Microsoft.Management/managementGroups/Contoso-Root\",\n        \"inheritedDefinitionsScopes\": [], // optional for desired state coexistence scenarios\n        \"desiredState\": { // optional for desired state coexistence scenarios\n        }\n    }\n],\n</code></pre>"},{"location":"definitions-and-global-settings/#deployifnotexists-and-modify-policy-assignments-need-managedidentitylocation","title":"DeployIfNotExists and Modify Policy Assignments need <code>managedIdentityLocation</code>","text":"<p>Policies with <code>Modify</code> and <code>DeployIfNotExists</code> effects require a Managed Identity for the remediation task. This section defines the location of the managed identity. It is often created in the tenant's primary location. This location can be overridden in the Policy Assignment files. The star in the example matches all <code>pacEnvironmentSelector</code> values.</p> <pre><code>    \"managedIdentityLocation\": {\n        \"*\": \"eastus2\"\n    },\n</code></pre>"},{"location":"definitions-and-global-settings/#excluding-scopes-for-all-assignments-with-globalnotscopes","title":"Excluding scopes for all Assignments with <code>globalNotScopes</code>","text":"<p>Resource Group patterns allow us to exclude \"special\" managed Resource Groups. The exclusion is not dynamic. It is calculated when the deployment scripts execute.</p> <p>The arrays can have the following entries:</p> Scope type Example <code>managementGroups</code> \"/providers/Microsoft.Management/managementGroups/myManagementGroupId\" <code>subscriptions</code> \"/subscriptions/00000000-0000-0000-000000000000\" <code>resourceGroups</code> \"/subscriptions/00000000-0000-0000-000000000000/resourceGroups/myResourceGroup\" <code>resourceGroupPatterns</code> No wild card or single * wild card at beginning or end of name or both; wild cards in the middle are invalid:  \"/resourceGroupPatterns/name\"  \"/resourceGroupPatterns/name*\"   \"/resourceGroupPatterns/*name\"  \"/resourceGroupPatterns/*name*\" <pre><code>    \"globalNotScopes\": {\n        \"*\": [\n            \"/resourceGroupPatterns/synapseworkspace-managedrg-*\",\n            \"/resourceGroupPatterns/managed-rg-*\",\n            \"/resourceGroupPatterns/databricks-*\",\n            \"/resourceGroupPatterns/DefaultResourceGroup*\",\n            \"/resourceGroupPatterns/NetworkWatcherRG\",\n            \"/resourceGroupPatterns/LogAnalyticsDefault*\",\n            \"/resourceGroupPatterns/cloud-shell-storage*\"\n        ],\n        \"tenant\": [\n            \"/providers/Microsoft.Management/managementGroups/mg-personal-subscriptions\",\n            \"/providers/Microsoft.Management/managementGroups/mg-policy-as-code\"\n        ]\n    },\n</code></pre>"},{"location":"definitions-and-global-settings/#reading-list","title":"Reading List","text":"<ul> <li>Setup DevOps Environment .</li> <li>Create a source repository and import the source code from this repository.</li> <li>Select the desired state strategy</li> <li>Define your deployment environment in <code>global-settings.jsonc</code>.</li> <li>Build your CI/CD pipeline using a starter kit.</li> <li>Optional: generate a starting point for the <code>Definitions</code> folders:</li> <li>Extract existing Policy resources from an environment.</li> <li>Import Policies from the Cloud Adoption Framework.</li> <li>Add custom Policies.</li> <li>Add custom Policy Sets.</li> <li>Create Policy Assignments.</li> <li>Import Policies from the Cloud Adoption Framework.</li> <li>Manage Policy Exemptions.</li> <li>Document your deployments.</li> <li>Execute operational tasks.</li> </ul>"},{"location":"desired-state-strategy/","title":"Desired state strategy","text":"<p>Desired State strategy enables shared responsibility scenarios. the following documents the archetypical use cases. For complex scenarios it is possible to combine multiple use cases (e.g., Use case 2a and 3, use case 1 and 2a, ...).</p>"},{"location":"desired-state-strategy/#use-case-1-centralized-team","title":"Use Case 1: Centralized Team","text":"<p>This original (previously the only) use case assumes one team/repo manages all Policies in a tenant or multiple tenants. You should not have any of the following elements in <code>global-settings.jsonc</code>:</p> <ul> <li><code>inheritedDefinitionsScopes</code></li> <li><code>desiredState</code></li> </ul>"},{"location":"desired-state-strategy/#use-case-2-shared-responsibility","title":"Use Case 2: Shared Responsibility","text":"<p>In a shared responsibility model multiple teams manage the same tenant(s) at the same scope. Additionally, a variant of this use case is well suited to what previously was called <code>brownfield</code> which needs to preserve Policy resources deployed prior to EPAC. The following diagram shows two EPAC solutions managing the same root (tenant). Other Policy as Code solutions can also participate if the solution sets <code>metadata.pacOwnerId</code>.</p> <p></p> <p>For standard behavior where each repo manages, no additional entries in <code>global-settings.jsonc</code> are necessary since the default strategy <code>full</code> is the default. <code>full</code> deletes any Policy resources without a <code>pacOwnerId</code>; however, id does not delete Policy resources with a different <code>pacOwnerId</code>.</p> <p>You may add the following JSON for clarity/documentation of the default behavior.</p> <pre><code>\"desiredState\": {\n    \"strategy\": \"full\",\n}\n</code></pre>"},{"location":"desired-state-strategy/#use-case-3-brownfield-transition","title":"Use Case 3: Brownfield Transition","text":"<p>While transitioning to EPAC, existing Policy resources may need to be kept. Breaking change: Previously this was accomplished with the <code>brownfield</code> variable in the pipeline used to set the <code>SuppressDeletes</code> flag on the planning script. Unfortunately, the previous approach was to course- grained, preventing an EPAC solution to remove its own deprecated Policy resources. Setting <code>desiredState</code> to <code>ownedOnly</code> allows EPAC to remove its own resources while preserving brownfield instances.</p> <pre><code>\"desiredState\": {\n    \"strategy\": \"ownedOnly\",\n}\n</code></pre>"},{"location":"desired-state-strategy/#use-case-4-hierarchical-organization","title":"Use Case 4: Hierarchical Organization","text":"<p>The hierarchical model allows a central team to manage the commonality while giving parts of the organization a capability to further restrict resources with Policies. This is a common scenario in multi-national corporations with additional jurisdictional requirements (e.g., data sovereignty, local regulations, ...).</p> <p>Additionally, it is possible for a solution at a child scope to inherit Policy definitions.</p> <p></p> <p>Repo A is managed the same as in use cases 1, 2 and 2a. Repo C sets sets the same as repo B in use case 2 or 2a. If inheriting Policy definitions from the parent EPAC solution, add <code>inheritedDefinitionsScopes</code> to <code>global-settings.jsonc</code>. Inherited definition scopes used but not managed by this repository, scopes must be visible from <code>deploymentRootScope</code>.</p> <pre><code>\"inheritedDefinitionsScopes\": [],\n\"desiredState\": {\n    \"strategy\": \"full\",\n}\n</code></pre>"},{"location":"desired-state-strategy/#use-case-5-exclude-some-scopes-and-policy-resources","title":"Use Case 5: Exclude some Scopes and Policy Resources","text":"<p>In rare cases you may need to exclude individual child scopes, or Policy resources from management by an EPAC solution.</p> <p>By default, Policy Assignments at resource groups are not managed by EPAC. Prior to v6.0, managing resource groups was to expensive. If you used the <code>-includeResourceGroup</code> switch in prior versions, set <code>includeResourceGroups</code> to <code>true</code> to achieve the same effect.</p> <p></p> <p>You can exclude any combination of scopes, Policies, Policy Sets and Policy Assignments. Simple wild cards are allowed.</p> <pre><code>\"desiredState\": {\n    \"strategy\": \"full\",\n    \"includeResourceGroups\": false,\n    \"excludedScopes\": [\n        // Management Groups\n        // Subscriptions\n        // Resource Groups\n    ],\n    \"excludedPolicyDefinitions\": [\n        // wild cards allowed\n    ],\n    \"excludedPolicySetDefinitions\": [\n        // wild cards allowed\n    ],\n    \"excludedPolicyAssignments\": [\n        // wild cards allowed\n    ]\n}\n</code></pre>"},{"location":"desired-state-strategy/#use-case-6-include-resource-groups","title":"Use case 6: Include Resource Groups","text":"<p>By default, Policy Assignments at resource groups are not managed by EPAC. Prior to v6.0, managing resource groups was to expensive. Breaking change: If you used the <code>-includeResourceGroup</code> switch in prior versions, set <code>includeResourceGroups</code> to <code>true</code> to achieve the same effect.</p> <pre><code>\"desiredState\": {\n    \"strategy\": \"full\",\n    \"includeResourceGroups\": true,\n}\n</code></pre>"},{"location":"desired-state-strategy/#reading-list","title":"Reading List","text":"<ul> <li>Setup DevOps Environment .</li> <li>Create a source repository and import the source code from this repository.</li> <li>Select the desired state strategy</li> <li>Define your deployment environment in <code>global-settings.jsonc</code>.</li> <li>Build your CI/CD pipeline using a starter kit.</li> <li>Optional: generate a starting point for the <code>Definitions</code> folders:</li> <li>Extract existing Policy resources from an environment.</li> <li>Import Policies from the Cloud Adoption Framework.</li> <li>Add custom Policies.</li> <li>Add custom Policy Sets.</li> <li>Create Policy Assignments.</li> <li>Import Policies from the Cloud Adoption Framework.</li> <li>Manage Policy Exemptions.</li> <li>Document your deployments.</li> <li>Execute operational tasks.</li> </ul>"},{"location":"documenting-assignments-and-policy-sets/","title":"Documenting Policy Assignments and Sets of Policy Set (Initiative) definitions","text":""},{"location":"documenting-assignments-and-policy-sets/#overview","title":"Overview","text":"<p>The Documentation feature provides reports on Policy Assignments deployed within an environment, and comparisons of Policy Assignments and Sets of Policy Set definitions for considering differences in policies and effects.  Output is generated as Markdown (<code>.md</code>), and Excel (<code>.csv</code>) files. with script <code>./Scripts/Operations/Build-PolicyDocumentation.ps1</code> It retrieves its instruction from the JSON files in this folder; the names of the definition JSON files don't matter as the script reads any file in the folder with a <code>.json</code> and <code>.jsonc</code> extension.</p> <ul> <li>Read and process Policy Assignments which are representative of an environment category, such as prod, test, dev, and sandbox. It generates Markdown (<code>.md</code>), and Excel (<code>.csv</code>) files.</li> <li>Read and process Policy Sets to compare them for Policy and effect overlap. It generates Markdown (<code>.md</code>), Excel (<code>.csv</code>) files, and JSON file (<code>.jsonc</code>).</li> </ul>"},{"location":"documenting-assignments-and-policy-sets/#example-documentation-specification-file","title":"Example Documentation Specification File","text":"<p>Each file must contain one or both documentation topics. This example file in the StarterKit has both topics. Element <code>pacEnvironment</code> references the Policy as Code environment in <code>global-settings.jsonc</code> defining the tenant and root scope where the custom Policies and Policy Sets are deployed.</p> <ul> <li><code>documentAssignments</code></li> <li><code>documentPolicySets</code></li> </ul> <pre><code>{\n    \"documentAssignments\": {\n        \"environmentCategories\": [\n            {\n                \"pacEnvironment\": \"tenant\",\n                \"environmentCategory\": \"PprodOD\",\n                \"scopes\": [ // Used in Markdown output only\n                    \"Management Groups: Contoso-Prod\"\n                ],\n                \"representativeAssignments\": [\n                    {\n                        \"shortName\": \"ASB\",\n                        \"id\": \"/providers/Microsoft.Management/managementGroups/Contoso-Prod/providers/Microsoft.Authorization/policyAssignments/prod-asb\"\n                    },\n                    {\n                        \"shortName\": \"ORG\",\n                        \"id\": \"/providers/Microsoft.Management/managementGroups/Contoso-Prod/providers/Microsoft.Authorization/policyAssignments/prod-org\"\n                    }\n                ]\n            },\n            {\n                \"pacEnvironment\": \"tenant\",\n                \"environmentCategory\": \"test\",\n                \"scopes\": [ // Used in Markdown output only\n                    \"Management Groups: Contoso-NonProd\"\n                ],\n                \"representativeAssignments\": [\n                    {\n                        \"shortName\": \"ASB\",\n                        \"id\": \"/providers/Microsoft.Management/managementGroups/Contoso-NonProd/providers/Microsoft.Authorization/policyAssignments/prod-asb\"\n                    },\n                    {\n                        \"shortName\": \"ORG\",\n                        \"id\": \"/providers/Microsoft.Management/managementGroups/Contoso-NonProd/providers/Microsoft.Authorization/policyAssignments/prod-org\"\n                    }\n                ]\n            },\n            {\n                \"pacEnvironment\": \"tenant\",\n                \"environmentCategory\": \"dev\",\n                \"scopes\": [ // Used in Markdown output only\n                    \"Management Groups: Contoso-Dev\"\n                ],\n                \"representativeAssignments\": [\n                    {\n                        \"shortName\": \"ASB\",\n                        \"id\": \"/providers/Microsoft.Management/managementGroups/Contoso-Dev/providers/Microsoft.Authorization/policyAssignments/prod-asb\"\n                    },\n                    {\n                        \"shortName\": \"ORG\",\n                        \"id\": \"/providers/Microsoft.Management/managementGroups/Contoso-Dev/providers/Microsoft.Authorization/policyAssignments/prod-org\"\n                    }\n                ]\n            },\n        ],\n        \"documentationSpecifications\": [\n            {\n                \"fileNameStem\": \"contoso-policy-effects-across-environments\",\n                \"environmentCategories\": [\n                    \"prod\",\n                    \"test\",\n                    \"dev\"\n                ],\n                \"title\": \"Contoso Policy effects\"\n            }\n        ]\n    },\n    \"documentPolicySets\": [\n        {\n            \"pacEnvironment\": \"tenant\",\n            \"fileNameStem\": \"contoso-compliance-policy-sets\",\n            \"title\": \"Document interesting Policy Sets\",\n            \"policySets\": [\n                {\n                    \"shortName\": \"ASB\",\n                    \"id\": \"/providers/Microsoft.Authorization/policySetDefinitions/1f3afdf9-d0c9-4c3d-847f-89da613e70a8\" // Azure Security Benchmark v3\n                },\n                {\n                    \"shortName\": \"NIST 800-171\",\n                    \"id\": \"/providers/Microsoft.Authorization/policySetDefinitions/03055927-78bd-4236-86c0-f36125a10dc9\" // NIST SP 800-171 Rev. 2\n                },\n                {\n                    \"shortName\": \"NIST 800-53\",\n                    \"id\": \"/providers/Microsoft.Authorization/policySetDefinitions/179d1daa-458f-4e47-8086-2a68d0d6c38f\" // NIST SP 800-53 Rev. 5\n                },\n                {\n                    \"shortName\": \"ORG\",\n                    \"id\": \"/providers/Microsoft.Management/managementGroups/Contoso-Root/providers/Microsoft.Authorization/policySetDefinitions/org-security-benchmark\" // Organization Security Benchmark for Custom Policies\n                }\n            ],\n            \"environmentColumnsInCsv\": [\n                \"prod\",\n                \"test\",\n                \"dev\",\n                \"lab\"\n            ]\n        }\n    ]\n}\n</code></pre>"},{"location":"documenting-assignments-and-policy-sets/#assignment-documentation","title":"Assignment Documentation","text":""},{"location":"documenting-assignments-and-policy-sets/#element-environmentcategories","title":"Element <code>environmentCategories</code>","text":"<p>For any given environment category, such as <code>prod</code>, <code>test</code>, <code>dev</code>, this section lists Policy Assignments which are representative for those environments. In many organizations, the same Policies and effects are applied to multiple Management Groups and even Azure tenants with the parameters consistent by environment category.</p> <p>Each <code>environmentCategories</code> entry specifies:</p> <ul> <li><code>pacEnvironment</code>: references the Policy as Code environment in <code>global-settings.jsonc</code> defining the tenant and root scope where the Policies and Policy Sets are deployed.</li> <li><code>environmentCategory</code>: name used for column headings and referenced in <code>documentationSpecifications</code> below.</li> <li><code>scopes</code>:  used in Markdown output only for the Scopes section as unprocessed text.</li> <li><code>representativeAssignments</code>: list Policy Assignment <code>id</code>s representing this <code>environmentCategory</code>. The <code>shortName</code> is used for CSV column headings and markdown output.</li> </ul>"},{"location":"documenting-assignments-and-policy-sets/#element-documentationspecifications","title":"Element <code>documentationSpecifications</code>","text":"<p>Each entry in the array defines a set of outputs:</p> <ul> <li><code>fileNameStem</code>: the file name stem used to construct the filenames.</li> <li><code>environmentCategories</code> listed as effect columns.</li> <li><code>title</code>: Heading 1 text for Markdown.</li> </ul>"},{"location":"documenting-assignments-and-policy-sets/#output-files","title":"Output files","text":"<ul> <li><code>&lt;fileNameStem&gt;-full.csv</code>: Lists Policies across environments and multiple Policy Sets sorted by <code>category</code> and <code>`displayName</code>.   | Column | Description |   | :----- | :---------- |   | <code>name</code> | Policy name (must be unique - a GUID for built-in Policies)   | <code>referencePath</code> | Disambiguate Policies included multiple times in an Policy Set definition with different <code>referenceId</code>s. It is blank if not needed or formatted as <code>&lt;policy-set.name&gt;\\\\&lt;referenceId&gt;</code>.   | <code>category</code> | Policy <code>category</code> from Policy <code>metadata</code>.   | <code>displayName</code> |   | <code>description</code> |   | <code>groupNames</code> | Union of (compliance Policy Sets) <code>groupNames</code> for this Policy.   | <code>allowedEffects</code> | List of allowed Policy <code>effect</code>s. Note: Some Policy Sets may have hard coded the effect which is not represented here.   | <code>&lt;environmentCategory&gt;_Effect</code> | One column per <code>environmentCategory</code> listing the highest enforcement level across the Policy Sets assigned in this environment category.   | <code>&lt;environmentCategory&gt;_Parameters</code> | One column per <code>environmentCategory</code> listing the parameters (JSON - excluding the effect parameter) for this Policy and <code>environmentCategory</code>.   | <code>&lt;environmentCategory&gt;-</code><code>&lt;policy-set-short name&gt;-Effect</code> | Detailed effect per <code>environmentCategory</code> and Policy Set. The next table shows examples for the different pattern for this value. An actual document will reflect the actual value in your environment.   | <code>&lt;policy-set-short name&gt;-ParameterDefinitions</code> | Parameter definitions (JSON) per Policy Set containing this Policy.</li> </ul> <p>Examples for effects:</p> Value Description <code>Deny (assignment: secretsExpirationSetEffect)</code> Effect is <code>Deny</code> specified in a user defined value for parameter <code>secretsExpirationSetEffect</code> <code>Audit (default: useRbacRulesMonitoringEffect)</code> Effect is <code>Audit</code> default value for Policy Set parameter <code>useRbacRulesMonitoringEffect</code>. <code>Audit (Initiative Fixed)</code> Effect is parameterized in Policy definition. Policy Set definition is setting it to a fixed value of <code>Audit</code>. <code>Audit (Policy Default)</code> Effect is parameterized in Policy definition with default value of <code>Audit</code>. The Policy Set definition does not override or surface this value. <code>Modify (Policy Fixed)</code> Effect is not parameterized in Policy definition. It is set to a fixed value of <code>Modify</code>. <ul> <li> <p><code>&lt;fileNameStem&gt;-parameters.csv</code>: This file is intended for a future enhancement to EPAC which will allow the effect values and parameter values to be specified in a spreadsheet instead of JSON. This file is generated to make it usable as the starting list, or to round-trip the values. It lists Policies across environments and Initiatives sorted by <code>category</code> and <code>`displayName</code>. Columns (see above for descriptions):</p> </li> <li> <p><code>name</code></p> </li> <li><code>referencePath</code></li> <li><code>category</code> (not required to define the parameters - useful for the author of the spreadsheet)</li> <li><code>displayName</code> (not required to define the parameters - useful for the author of the spreadsheet)</li> <li><code>description</code> (not required to define the parameters - useful for the author of the spreadsheet)</li> <li><code>allowedEffects</code> (not required to define the parameters - useful for the author of the spreadsheet)</li> <li><code>&lt;environmentCategory&gt;_Effect</code></li> <li> <p><code>&lt;environmentCategory&gt;_Parameters</code></p> </li> <li> <p><code>&lt;fileNameStem&gt;-summary.md</code>: This Markdown file is intended for developers for a quick overview of the effects and parameters in place for each <code>environmentCategory</code>. It does not provide details about the individual Initiatives assigned. It is equivalent to <code>&lt;fileNameStem&gt;-parameters.csv</code>. The Policies are sorted by <code>category</code> and <code>`displayName</code>. Each <code>environmentCategory</code> column shows the current enforcement level in bold. If the value is fixed, the value is also in italics. If it is parametrized, the other allowed values are shown in italics.</p> </li> <li> <p><code>&lt;fileNameStem&gt;-full.md</code>: This Markdown file is intended for security personel requiring more details about the Assignments and Policies. It displays the same information as the summary plus the additional details equivalent to <code>&lt;fileNameStem&gt;-full.csv</code>. The Policies are sorted by <code>category</code> and <code>`displayName</code>. Each <code>environmentCategory</code> column shows the current enforcement level in bold. If the value is fixed, the value is also in italics. If it is parametrized, the other allowed values are shown in italics. The additional details are:</p> </li> <li>Group Names</li> <li>Effects per <code>environmentCategory</code> and Policy Set with additional details on the origin of the effect.</li> </ul>"},{"location":"documenting-assignments-and-policy-sets/#policy-set-documentation","title":"Policy Set Documentation","text":"<p>Compares multiple Policy Set definitions for Policy and effect overlap as Markdown and Excel (<code>.csv</code>) files.</p>"},{"location":"documenting-assignments-and-policy-sets/#element-documentpolicysets","title":"Element <code>documentPolicySets</code>","text":"<ul> <li><code>pacEnvironment</code>: references the Policy as Code environment in <code>global-settings.jsonc</code> defining the tenant and root scope where the Policy and Policy Set definitions are deployed.</li> <li><code>fileNameStem</code>: the file name without the extension (.md, .csv, .jsonc)</li> <li><code>title</code>: Heading 1 text for Markdown.</li> <li><code>policySets</code>: list Policy Sets (<code>id</code>) to be compared and included in the parameter JSON file. The <code>shortName</code> is used for column headings.</li> <li><code>environmentColumnsInCsv</code>: list of columns to generate a parameter file starter equivalent to <code>&lt;fileNameStem&gt;-parameters.csv</code> above in the assignment documentation section.</li> </ul>"},{"location":"documenting-assignments-and-policy-sets/#output-files_1","title":"Output files","text":"<ul> <li> <p><code>&lt;fileNameStem&gt;-full.md</code>: Markdown file with Policies sorted by Policy category and display name with effect columns for each Initiative.</p> </li> <li> <p>Each effect column starts with the bolded display Name followed by the description and lines grouped by bolded Initiative short name with the effect parameter name in italics and the group names in normal text.</p> </li> <li> <p>The text below the description contains details on parameters and group names for each initiative.</p> </li> <li> <p><code>&lt;fileNameStem&gt;-full.csv</code>: Excel file with the same information as the Markdown file.</p> </li> <li><code>&lt;fileNameStem&gt;-parameters.csv</code>: Excel parameter file starter equivalent to <code>&lt;fileNameStem&gt;-parameters.csv</code> above in the assignment documentation section.</li> <li><code>&lt;fileNameStem&gt;.jsonc</code>: Parameter file starter in JSON format to simplify parameter settings for Assignments (traditional approach).</li> </ul>"},{"location":"documenting-assignments-and-policy-sets/#reading-list","title":"Reading List","text":"<ul> <li>Setup DevOps Environment .</li> <li>Create a source repository and import the source code from this repository.</li> <li>Select the desired state strategy</li> <li>Define your deployment environment in <code>global-settings.jsonc</code>.</li> <li>Build your CI/CD pipeline using a starter kit.</li> <li>Optional: generate a starting point for the <code>Definitions</code> folders:</li> <li>Extract existing Policy resources from an environment.</li> <li>Import Policies from the Cloud Adoption Framework.</li> <li>Add custom Policies.</li> <li>Add custom Policy Sets.</li> <li>Create Policy Assignments.</li> <li>Import Policies from the Cloud Adoption Framework.</li> <li>Manage Policy Exemptions.</li> <li>Document your deployments.</li> <li>Execute operational tasks.</li> </ul>"},{"location":"extract-existing-policy-resources/","title":"Extract existing Policy Resources from an Environment","text":"<p>Note</p> <p>This is a preview version which may produce strange assignment files in rare circumstances. If you see such a problem, please raise a GitHub issue.</p> <p>Extracts existing Policies, Policy Sets, and Policy Assignments and outputs them in EPAC format into subfolders in folder (<code>$outputFolders/Definitions</code>). The subfolders are <code>policyDefinitions</code>, <code>policySetDefinitions</code>, and <code>policyAssignments</code>. In a new EPAC instance these subfolders can be directly copied to the <code>Definitions</code> folder enabling an initial transition from a pre-EPAC to EPAC environment.</p> <p>Warning</p> <p>The script deletes the <code>$outputFolders/Definitions</code> folder before creating a new set of files. In interactive mode it will ask for confirmation before deleting the directory.</p> Parameter Required Explanation <code>PacEnvironmentSelector</code> Optional Defines which Policy as Code (PAC) environment we are using; if omitted, the script prompts for a value. The values are read from <code>$DefinitionsRootFolder/global-settings.jsonc</code>. <code>definitionsRootFolder</code> Optional Definitions folder path. Defaults to environment variable <code>$env:PAC_DEFINITIONS_FOLDER</code> or <code>./Definitions</code>. It contains <code>global-settings.jsonc</code>. <code>outputFolder</code> Optional Output Folder. Defaults to environment variable <code>$env:PAC_OUTPUT_FOLDER</code> or <code>./Outputs</code>. <code>interactive</code> Optional Script is being run interactively and can request az login. It will also prompt for each file to process or skip. Defaults to $true. <code>includeChildScopes</code> Optional Switch parameter to include Policies and Policy Sets in child scopes; child scopes are normally ignored for definitions. This does not impact Policy Assignments. <code>fileExtension</code> Optional Controls the output files extension. Default is <code>jsonc</code> but <code>json</code> is also accepted <p>The scripts creates a <code>Definitions</code> folder in the <code>outputFolder</code> and subfolders for <code>policyDefinitions</code>, <code>policySetDefinitions</code> and <code>policyAssignments</code>. To use the generated files copy them to your <code>Definitions</code> folder.</p> <ul> <li><code>policyDefinitions</code>, <code>policySetDefinitions</code> have a subfolder based on <code>metadata.category</code>. If the definition has no <code>category</code> <code>metadata</code> they are put in a subfolder labeled <code>Unknown Category</code>. Duplicates when including child scopes are sorted into the <code>Duplicates</code> folder. Creates one file per Policy and Policy Set.</li> <li><code>policyAssignments</code> have a subfolder <code>policy</code> for assignments of a single Policy, or a subfolder <code>policySet</code> for assignment of a Policy Set. Creates one file per unique assigned Policy or Policy Set spanning multiple Assignments.</li> </ul>"},{"location":"extract-existing-policy-resources/#preview-caveats","title":"Preview Caveats","text":"<p>The extractions are subject to the following assumptions and caveats:</p> <ul> <li>Names of Policies and Policy Sets are unique across multiple scopes (switch <code>includeChildScopes</code> is used)</li> <li>Assignment names are the same if the parameters match across multiple assignments across scopes for the same <code>policyDefinitionId</code> to enable optimization of the JSON.</li> <li>Ignores Assignments auto-assigned by Security Center (Defender for Cloud) at subscription level.</li> <li>Does not collate across multiple tenants.</li> <li>Does not calculate any <code>additionalRoleAssignments</code>.</li> <li>Only optimizes the tree structure from the three levels in the following order:</li> <li><code>policyDefinition</code> (name or id)</li> <li><code>parameters</code> per parameter set for the <code>policyDefinition</code></li> <li>Assignment name, scopes, and other attributes</li> <li>In some cases, ordering scope would yield a more compact tree structure:</li> <li><code>policyDefinition</code> (name or id)</li> <li>Assignment name, scopes, and other attributes</li> <li><code>parameters</code> per parameter set for the <code>policyDefinition</code></li> <li>Doesn't (yet) collate multiple assignments in support of CSV files for parameters. Use <code>Build-PolicyDocumentation.ps1</code> to generate CSV files and edit the corresponding assignments to reference the CSV file</li> <li>Doesn't generate Exemptions; use <code>Get-AzExemptions.ps1</code> instead.</li> </ul>"},{"location":"extract-existing-policy-resources/#reading-list","title":"Reading List","text":"<ul> <li>Setup DevOps Environment .</li> <li>Create a source repository and import the source code from this repository.</li> <li>Select the desired state strategy</li> <li>Define your deployment environment in <code>global-settings.jsonc</code>.</li> <li>Build your CI/CD pipeline using a starter kit.</li> <li>Optional: generate a starting point for the <code>Definitions</code> folders:</li> <li>Extract existing Policy resources from an environment.</li> <li>Import Policies from the Cloud Adoption Framework.</li> <li>Add custom Policies.</li> <li>Add custom Policy Sets.</li> <li>Create Policy Assignments.</li> <li>Import Policies from the Cloud Adoption Framework.</li> <li>Manage Policy Exemptions.</li> <li>Document your deployments.</li> <li>Execute operational tasks.</li> </ul>"},{"location":"integrating-with-alz/","title":"Integrating EPAC with Azure Landing Zones","text":""},{"location":"integrating-with-alz/#rationale","title":"Rationale","text":"<p>Microsoft publishes and maintains a list of Policies, Policy Sets and Assignments which are deployed as part of the Cloud Adoption Framework Azure Landing Zones deployment. The central repository that contains these policies acts as the source of truth for ALZ deployments via the portal, Bicep and Terraform. A current list of policies which are deployed using these solutions is found at this link.</p> <p>To enable customers to use the Enterprise Policy as Code solution and combine Microsoft's policy recommendations there is a script which will pull the Policies, Policy Sets and Policy Assignments from the central repository and allow you to deploy them using this solution.</p> <p>As the policies and assignments change in main repository the base files in this solution can be updated to match.</p>"},{"location":"integrating-with-alz/#scenarios","title":"Scenarios","text":"<p>There are two scenarios for integrating EPAC with ALZ.</p> <ol> <li>Existing Azure Landing Zone deployment and EPAC is to be used as the policy engine moving forward</li> <li>Using EPAC to deploy and manage the Azure Landing Zone policies</li> </ol>"},{"location":"integrating-with-alz/#scenario-1-existing-deployment","title":"Scenario 1 - Existing Deployment","text":"<p>With an existing Azure Landing Zone deployment you can use EPAC's extract scripts to extract the existing policies and assignments. </p> <ol> <li> <p>Install the EnterprisePolicyAsCode module from the PowerShell gallery and import it.     <pre><code>Install-Module EnterprisePolicyAsCode\nImport-Module EnterprisePolicyAsCode\n</code></pre></p> </li> <li> <p>Create a new policy definition folder structure using the command below.     <pre><code>New-EPACDefinitionFolder -DefinitionsRootFolder .\\Definitions\n</code></pre></p> </li> <li> <p>Update the <code>global-settings.json</code> file in the Definitions folder as described here</p> </li> <li> <p>Extract the existing policies from the environment by using the extract functionality as described here</p> <p>This will create in the <code>Output</code> folder a group of folders containing the extracted policies. Note that it extracts all policies in the environment including ones not deployed by any of the Azure Landing Zone deployments.</p> </li> <li> <p>Copy each of the folders in the <code>Output\\Definitions</code> folder to the <code>Definitions</code> folder you created above. </p> </li> <li> <p>At this point you can run the build script and generate a plan to validate what is going to be changed in the existing environment.</p> <p><pre><code>Build-DeploymentPlans\n</code></pre> In a newly deployed CAF environment with no other policies the results of the plan should be similar to below - EPAC will update each policy definition, set definition and assignment with a PacOwnerId</p> <pre><code>===================================================================================================\nSummary\n===================================================================================================\nPolicy counts:\n    0 unchanged\n    116 changes:\n        new     = 0\n        update  = 116\n        replace = 0\n        delete  = 0\nPolicy Set counts:\n    0 unchanged\n    7 changes:\n        new     = 0\n        update  = 7\n        replace = 0\n        delete  = 0\nPolicy Assignment counts:\n    0 unchanged\n    30 changes:\n        new     = 0\n        update  = 30\n        replace = 0\n        delete  = 0\nRole Assignment counts:\n    0 changes\n</code></pre> </li> <li> <p>Run the generated plan to update the objects     <pre><code>Deploy-PolicyPlan\n</code></pre></p> </li> </ol>"},{"location":"integrating-with-alz/#scenario-2-alz-policy-deployment-with-epac","title":"Scenario 2 - ALZ Policy Deployment with EPAC","text":"<p>To deploy the ALZ policies using EPAC follow the steps below.</p> <ol> <li> <p>Install the EnterprisePolicyAsCode module from the PowerShell gallery and import it.     <pre><code>Install-Module EnterprisePolicyAsCode\nImport-Module EnterprisePolicyAsCode\n</code></pre></p> </li> <li> <p>Create a new policy definition folder structure using the command below.     <pre><code>New-EPACDefinitionFolder -DefinitionsRootFolder .\\Definitions\n</code></pre></p> </li> <li> <p>Update the <code>global-settings.json</code> file in the Definitions folder as described here</p> </li> <li> <p>Synchronise the policies from the upstream repository. You should ensure that you are running the latest version of the EPAC module before running this script each time.  <pre><code>Sync-CAFPolicies -DefinitionsRootFolder .\\Definitions\n</code></pre></p> </li> <li> <p>Update the assignments scopes     Each assignment file has a default scope assigned to it - this need to be updated to reflect your environment and <code>global-settings.jsonc</code> file.</p> <p>For example:</p> <pre><code>{\n    \"nodeName\": \"/Root/\",\n    \"scope\": {\n        \"tenant1\": [\n            \"/providers/Microsoft.Management/managementGroups/toplevelmanagementgroup\"\n        ]\n    },\n    \"parameters\": {\n        \"logAnalytics\": \"\",\n        \"logAnalytics_1\": \"\",\n        \"emailSecurityContact\": \"\",\n        \"ascExportResourceGroupName\": \"\",\n        \"ascExportResourceGroupLocation\": \"\"\n    }\n</code></pre> <p>If my top level management group had an ID of contoso I and my PAC environments specified a production environment I would need to update the block as below.</p> <pre><code>{\n    \"nodeName\": \"/Root/\",\n    \"scope\": {\n        \"production\": [\n            \"/providers/Microsoft.Management/managementGroups/contoso\"\n        ]\n    },\n    \"parameters\": {\n        \"logAnalytics\": \"\",\n        \"logAnalytics_1\": \"\",\n        \"emailSecurityContact\": \"\",\n        \"ascExportResourceGroupName\": \"\",\n        \"ascExportResourceGroupLocation\": \"\"\n    }\n</code></pre> <p>Each assignment file corresponds to a management group deployed as part of the CAF Azure Landing Zone management group structure.</p> </li> <li> <p>Update assignment parameters.</p> <p>Several of the assignment files also have parameters which need to be in place. Pay attention to the requirements about having a Log Analytics workspace deployed prior to assigning these policies as it is a requirement for several of the assignments. Less generic parameters are also available for modification in the assignment files.</p> </li> <li> <p>Follow the normal steps to deploy the solution to the environment.</p> </li> </ol>"},{"location":"integrating-with-alz/#keeping-up-to-date-with-changes","title":"Keeping up to date with changes","text":"<p>The Azure Landing Zone deployment contains a number of policies which help provide guardrails to an environment, and the team which works on these policies is always providing updates to the original content to keep in line with Microsoft best practice and roadmap. The EPAC solution contains a function to help synchronise changes from the upstream project</p> <p>To pull the latest changes from the upstream repository - use the code below. <pre><code>Sync-CAFPolicies\n</code></pre> Carefully review the proposed changes before deploying them. It is best to make sure you're project is stored in source control so you can easily see which files have changed before deployment. </p> <p>Warning</p> <p>If you have follow Scenario 1 above, the first time you run the <code>Sync-CAFPolicies</code> there will be many changes recorded due to formatting. Review the files completely before deploying.</p> <p>Note</p> <p>Assignments deployed via the ALZ accelerators are kept in sync with the EnterprisePolicyAsCode module so ensure you have the latest PowerShell module installed before running <code>Sync-CAFPolicies</code></p>"},{"location":"integrating-with-alz/#reading-list","title":"Reading List","text":"<ul> <li>Setup DevOps Environment .</li> <li>Create a source repository and import the source code from this repository.</li> <li>Select the desired state strategy</li> <li>Define your deployment environment in <code>global-settings.jsonc</code>.</li> <li>Build your CI/CD pipeline using a starter kit.</li> <li>Optional: generate a starting point for the <code>Definitions</code> folders:</li> <li>Extract existing Policy resources from an environment.</li> <li>Import Policies from the Cloud Adoption Framework.</li> <li>Add custom Policies.</li> <li>Add custom Policy Sets.</li> <li>Create Policy Assignments.</li> <li>Import Policies from the Cloud Adoption Framework.</li> <li>Manage Policy Exemptions.</li> <li>Document your deployments.</li> <li>Execute operational tasks.</li> </ul>"},{"location":"operating-environment/","title":"Operating Environment","text":""},{"location":"operating-environment/#epac-software-requirements","title":"EPAC Software Requirements","text":"<p>Your operating environment will include two repos, a runner, and at least one developer machine. The following software is required on the runners and any developer workstation.</p> <ul> <li>PowerShell 7.3.1 or later, 7.3.2 (latest) recommended</li> <li>PowerShell Modules</li> <li>Az required 9.3.0 or later - 9.2.x has a bug which causes EPAC to fail</li> <li>ImportExcel (required only if using Excel functionality)</li> <li>Git latest version</li> </ul> <p>Note</p> <p>AzCli Module, Azure CLI, and Python are no longer required as of our v6.0 (January 2023) release.</p>"},{"location":"operating-environment/#pipeline-runner-or-agent","title":"Pipeline Runner or Agent","text":"<p>OS: Any that Support PowerShell versions above.</p> <ul> <li>Linux and Windows are fully supported by EPAC</li> <li>Mac OS might work; however, we have not tested this scenario.</li> </ul> <p>Software: Must Meet EPAC Software Requirements.</p>"},{"location":"operating-environment/#developer-workstation","title":"Developer Workstation","text":"<ul> <li>Software: Must meet EPAC Software Requirements.</li> <li>Software Recommendations: Visual Studio Code 1.74.3 or later (may work with older versions)</li> </ul>"},{"location":"operating-environment/#required-management-groups-and-subscriptions","title":"Required Management Groups and Subscriptions","text":"<p>This solution requires EPAC environments for development, (optional) integration, and production per Azure tenant. These EPAC environments are not the same as the standard Azure environments for applications or solutions - do not confuse them; EPAC non-prod environment are only for development and integration of Azure Policy.  The standard Azure Sandbox, DEV, DEVINT, TEST/QA and PROD app solution environments are managed with Policy deployed from the EPAC PROD environment.</p> <ul> <li>Build a management group dedicated to Policy as Code (PaC) -- <code>mg-epac-dev</code> https://docs.microsoft.com/en-us/azure/governance/management-groups/create-management-group-portal</li> <li>Create management groups or subscriptions to simulate your EPAC production environments.</li> </ul>"},{"location":"operating-environment/#security-considerations-for-devops-cicd-runnersagents","title":"Security Considerations for DevOps CI/CD Runners/Agents","text":"<p>Agents (also called runners) are often hosted in VMs within Azure itself. It is therefore essential to manage them as highly privileged devices.</p> <ul> <li>Utilize hardened images.</li> <li>Be managed as high-privilege assets to minimize the risk of compromise.</li> <li>Only used for a single purpose.</li> <li>Hosted in PROD tenant in multi-tenant scenarios.</li> <li>Hosted in the hub VNET or a shared services VNET.</li> </ul>"},{"location":"operating-environment/#reading-list","title":"Reading List","text":"<ul> <li>Setup DevOps Environment .</li> <li>Create a source repository and import the source code from this repository.</li> <li>Select the desired state strategy</li> <li>Define your deployment environment in <code>global-settings.jsonc</code>.</li> <li>Build your CI/CD pipeline using a starter kit.</li> <li>Optional: generate a starting point for the <code>Definitions</code> folders:</li> <li>Extract existing Policy resources from an environment.</li> <li>Import Policies from the Cloud Adoption Framework.</li> <li>Add custom Policies.</li> <li>Add custom Policy Sets.</li> <li>Create Policy Assignments.</li> <li>Import Policies from the Cloud Adoption Framework.</li> <li>Manage Policy Exemptions.</li> <li>Document your deployments.</li> <li>Execute operational tasks.</li> </ul>"},{"location":"operational-scripts/","title":"Operational Scripts","text":""},{"location":"operational-scripts/#new-azpolicyreaderroleps1","title":"New-AzPolicyReaderRole.ps1","text":"<p>Creates a custom role <code>Policy Reader</code> at the scope selected with <code>PacEnvironmentSelector</code>:</p> <ul> <li><code>Microsoft.Management/register/action</code></li> <li><code>Microsoft.Authorization/policyassignments/read</code></li> <li><code>Microsoft.Authorization/policydefinitions/read</code></li> <li><code>Microsoft.Authorization/policyexemptions/read</code></li> <li><code>Microsoft.Authorization/policysetdefinitions/read</code></li> <li><code>Microsoft.PolicyInsights/*</code></li> <li><code>Microsoft.Support/*</code></li> </ul> Parameter Required Explanation <code>PacEnvironmentSelector</code> Optional Defines which Policy as Code (PAC) environment we are using, if omitted, the script prompts for a value. The values are read from <code>$DefinitionsRootFolder/global-settings.jsonc</code>. <code>DefinitionsRootFolder</code> Optional Definitions folder path. Defaults to environment variable <code>$env:PAC_DEFINITIONS_FOLDER</code> or <code>./Definitions</code>. It contains <code>global-settings.jsonc</code>. <code>interactive</code> Optional Script is being run interactively and can request az login. Defaults to $false if PacEnvironmentSelector parameter provided and $true otherwise."},{"location":"operational-scripts/#create-azremediationtasksps1","title":"Create-AzRemediationTasks.ps1","text":"<p>This script executes all remediation tasks in a Policy as Code environment specified with parameter <code>PacEnvironmentSelector</code>. The script will interactively prompt for the value if the parameter is not supplied. The script will recurse the Management Group structure and subscriptions from the defined starting point.</p> <ul> <li>Find all Policy assignments with potential remediations</li> <li>Query Policy Insights for non-complaint resources</li> <li>Start remediation task for each Policy with non-compliant resources</li> </ul> Parameter Required Explanation <code>PacEnvironmentSelector</code> Optional Defines which Policy as Code (PAC) environment we are using, if omitted, the script prompts for a value. The values are read from <code>$DefinitionsRootFolder/global-settings.jsonc</code>. <code>DefinitionsRootFolder</code> Optional Definitions folder path. Defaults to environment variable <code>$env:PAC_DEFINITIONS_FOLDER</code> or <code>./Definitions</code>. It contains <code>global-settings.jsonc</code>. <code>interactive</code> Optional Script is being run interactively and can request az login. Defaults to $false if PacEnvironmentSelector parameter provided and $true otherwise."},{"location":"operational-scripts/#build-definitionsfolderps1","title":"Build-DefinitionsFolder.ps1","text":"<p>Extract existing Policies, Policy Sets, and Policy Assignments and outputs them in EPAC format into folders which can be directly copied to the <code>Definitions</code> folder. This useful when initially transitioning from a pre-EPAC to EPAC environment.</p> Parameter Required Explanation <code>PacEnvironmentSelector</code> Optional Defines which Policy as Code (PAC) environment we are using, if omitted, the script prompts for a value. The values are read from <code>$DefinitionsRootFolder/global-settings.jsonc</code>. <code>definitionsRootFolder</code> Optional Definitions folder path. Defaults to environment variable <code>$env:PAC_DEFINITIONS_FOLDER</code> or <code>./Definitions</code>. It contains <code>global-settings.jsonc</code>. <code>outputFolder</code> Optional Output Folder. Defaults to environment variable <code>$env:PAC_OUTPUT_FOLDER</code> or <code>./Outputs</code>. <code>interactive</code> Optional Script is being run interactively and can request az login. It will also prompt for each file to process or skip. Defaults to $true. <code>includeChildScopes</code> Optional Switch parameter to include Policies and Policy Sets in child scopes; child scopes are normally ignored for definitions. This does not impact Policy Assignments."},{"location":"operational-scripts/#build-policyassignmentdocumentationps1","title":"Build-PolicyAssignmentDocumentation.ps1","text":"<p>Generates documentation for Assignments and Policy Sets based on JSON files in <code>$definitionsFolder/Documentation</code>. See Define Documentation for details.</p> Parameter Required Explanation <code>definitionsRootFolder</code> Optional Definitions folder path. Defaults to environment variable <code>$env:PAC_DEFINITIONS_FOLDER</code> or <code>./Definitions</code>. It contains <code>global-settings.jsonc</code>. <code>outputFolder</code> Optional Output Folder. Defaults to environment variable <code>$env:PAC_OUTPUT_FOLDER</code> or <code>./Outputs</code>. <code>interactive</code> Optional Script is being run interactively and can request az login. It will also prompt for each file to process or skip. Defaults to $true. <code>suppressConfirmation</code> Optional Switch parameter to suppresses prompt for confirmation of each file in interactive mode."},{"location":"operational-scripts/#get-azmissingtagsps1","title":"Get-AzMissingTags.ps1","text":"<p>Lists missing tags based on non-compliant Resource Groups.</p> Parameter Required Explanation <code>PacEnvironmentSelector</code> Optional Defines which Policy as Code (PAC) environment we are using, if omitted, the script prompts for a value. The values are read from <code>$DefinitionsRootFolder/global-settings.jsonc</code>. <code>DefinitionsRootFolder</code> Optional Definitions folder path. Defaults to environment variable <code>$env:PAC_DEFINITIONS_FOLDER</code> or <code>./Definitions</code>. It contains <code>global-settings.jsonc</code>. <code>OutputFileName</code> Optional Output file name. Defaults to environment variable <code>$env:PAC_OUTPUT_FOLDER/Tags/missing-tags-results.csv</code> or <code>./Outputs/Tags/missing-tags-results.csv</code>. <code>interactive</code> Optional Script is being run interactively and can request az login. Defaults to $false if PacEnvironmentSelector parameter provided and $true otherwise."},{"location":"operational-scripts/#get-azresourcetagsps1","title":"Get-AzResourceTags.ps1","text":"<p>Lists all resource tags in tenant.</p> Parameter Required Explanation <code>PacEnvironmentSelector</code> Optional Defines which Policy as Code (PAC) environment we are using, if omitted, the script prompts for a value. The values are read from <code>$DefinitionsRootFolder/global-settings.jsonc</code>. <code>DefinitionsRootFolder</code> Optional Definitions folder path. Defaults to environment variable <code>$env:PAC_DEFINITIONS_FOLDER</code> or <code>./Definitions</code>. It contains <code>global-settings.jsonc</code>. <code>OutputFileName</code> Optional Output file name. Defaults to environment variable <code>$env:PAC_OUTPUT_FOLDER/Tags/all-tags.csv</code> or <code>./Outputs/Tags/all-tags.csv</code>. <code>interactive</code> Optional Script is being run interactively and can request az login. Defaults to $false if PacEnvironmentSelector parameter provided and $true otherwise."},{"location":"operational-scripts/#get-azstoragenetworkconfigps1","title":"Get-AzStorageNetworkConfig.ps1","text":"<p>Lists Storage Account network configurations.</p> Parameter Required Explanation <code>PacEnvironmentSelector</code> Optional Defines which Policy as Code (PAC) environment we are using, if omitted, the script prompts for a value. The values are read from <code>$DefinitionsRootFolder/global-settings.jsonc</code>. <code>DefinitionsRootFolder</code> Optional Definitions folder path. Defaults to environment variable <code>$env:PAC_DEFINITIONS_FOLDER</code> or <code>./Definitions</code>. It contains <code>global-settings.jsonc</code>. <code>OutputFileName</code> Optional Output file name. Defaults to environment variable <code>$env:PAC_OUTPUT_FOLDER/Storage/StorageNetwork.csv</code> or <code>./Outputs/Storage/StorageNetwork.csv</code> <code>interactive</code> Optional Script is being run interactively and can request az login. Defaults to $false if PacEnvironmentSelector parameter provided and $true otherwise."},{"location":"operational-scripts/#get-azuserroleassignmentsps1","title":"Get-AzUserRoleAssignments.ps1","text":"<p>Lists Role assignments per user.</p> Parameter Required Explanation <code>PacEnvironmentSelector</code> Optional Defines which Policy as Code (PAC) environment we are using, if omitted, the script prompts for a value. The values are read from <code>$DefinitionsRootFolder/global-settings.jsonc</code>. <code>DefinitionsRootFolder</code> Optional Definitions folder path. Defaults to environment variable <code>$env:PAC_DEFINITIONS_FOLDER</code> or <code>./Definitions</code>. It contains <code>global-settings.jsonc</code>. <code>OutputFileName</code> Optional Output file name. Defaults to environment variable <code>$env:PAC_OUTPUT_FOLDER/Users/RoleAssignments.csv</code> or <code>./Outputs/Users/RoleAssignments.csv</code> <code>interactive</code> Optional Script is being run interactively and can request az login. Defaults to $false if PacEnvironmentSelector parameter provided and $true otherwise."},{"location":"operational-scripts/#get-azpolicyaliasoutputcsvps1","title":"Get-AzPolicyAliasOutputCSV.ps1","text":"<p>Pull all policy aliases into a CSV file. This is helpful for Azure Policy development.</p> Parameter Required Explanation <code>NamespaceMatch</code> Optional Use this to cut out unnecessary aliases by specifying your desired namespace. More documentation here: https://learn.microsoft.com/en-us/powershell/module/az.resources/get-azpolicyalias?view=azps-8.3.0 <code>ResourceTypeMatch</code> Optional Resource type match can also be used to filter out unnecessary aliases. More documentation here: https://learn.microsoft.com/en-us/powershell/module/az.resources/get-azpolicyalias?view=azps-8.3.0"},{"location":"operational-scripts/#new-epacpolicydefinitionps1","title":"New-EPACPolicyDefinition.ps1","text":"<p>Exports a policy definition from Azure to a local file in the EPAC format. Works for both Policies and set definitionsPolicy Sets</p> Parameter Required Explanation <code>PolicyDefinitionId</code> Required Resource ID in Azure for the policy you want to export - can take input from a pipeline <code>OutputFolder</code> Optional Output folder for the exported policy definition - default is JSON output to console"},{"location":"operational-scripts/#new-epacpolicyassignmentdefinitionps1","title":"New-EPACPolicyAssignmentDefinition.ps1","text":"<p>Exports a policy assignment from Azure to a local file in the EPAC format. Provides a base template only - you may have to manipulate the file to fit in to your current assignment structure</p> Parameter Required Explanation <code>PolicyAssignmentId</code> Required Resource ID in Azure for the policy assignment you want to export <code>OutputFolder</code> Optional Output folder for the exported policy assignment - - default is JSON output to console"},{"location":"operational-scripts/#new-epacdefinitionfolderps1","title":"New-EPACDefinitionFolder.ps1","text":"<p>Creates a definitions folder with the correct folder structure and blank global settings file.</p> Parameter Required Explanation <code>DefinitionsRootFolder</code> Optional Folder name for definitions (default is <code>Definitions</code>)"},{"location":"operational-scripts/#reading-list","title":"Reading List","text":"<ul> <li>Setup DevOps Environment .</li> <li>Create a source repository and import the source code from this repository.</li> <li>Select the desired state strategy</li> <li>Define your deployment environment in <code>global-settings.jsonc</code>.</li> <li>Build your CI/CD pipeline using a starter kit.</li> <li>Optional: generate a starting point for the <code>Definitions</code> folders:</li> <li>Extract existing Policy resources from an environment.</li> <li>Import Policies from the Cloud Adoption Framework.</li> <li>Add custom Policies.</li> <li>Add custom Policy Sets.</li> <li>Create Policy Assignments.</li> <li>Import Policies from the Cloud Adoption Framework.</li> <li>Manage Policy Exemptions.</li> <li>Document your deployments.</li> <li>Execute operational tasks.</li> </ul>"},{"location":"policy-assignments/","title":"Policy Assignments","text":"<p>This chapter describes how Policy Assignments are handled by EPAC. To learn about how custom Policy and Policy Set definitions are managed, see the Policies and Policy Set Definitions.</p>"},{"location":"policy-assignments/#assignment-json-structure","title":"Assignment JSON structure","text":"<p>Assignment JSON is hierarchical for efficient definitions, avoiding duplication (copy/paste) of JSON. Each branch of the tree is cumulative. Each tree node must include a <code>nodeName</code> - an arbitrary string exclusively used by EPAC to display an error location. EPAC concatenates a leading <code>/</code> and the nodeName entries encountered in the tree to create a \"breadcrumbs\" trail; therefore, we recommend that you use <code>/</code> to help separate the concatenated <code>nodeName</code>. The following (partial and invalid) assignment tree would create this error message.</p> <p><code>Node \"//Security/Prod/\": only one definitionEntry or definitionEntryList can appear in any branch.</code></p> <pre><code>{\n  \"nodeName\": \"/Security/\",\n  \"definitionEntry\": {\n    \"policySetName\": \"org-sec-initiative\",\n  },\n  \"children\": [\n    {\n      \"nodeName\": \"Prod/\",\n      \"definitionEntry\": {\n        \"policySetName\": \"org-sec-initiative\",\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"policy-assignments/#key-points","title":"Key Points","text":"<ul> <li>Every tree branch must accumulate a <code>definitionEntry</code> (or <code>definitionEntryList</code>), Assignment naming (<code>name</code> and <code>displayName</code>) and <code>scope</code> element.</li> <li>The elements <code>parameters</code>, <code>overrides</code>, <code>resourceSelectors</code>, <code>notScope</code>, <code>enforcementMode</code>, <code>metadata</code>, <code>userAssignedIdentity</code>, <code>managedIdentityLocations</code>,<code>additionalRoleAssignments</code>and<code>nonComplianceMessages</code> are optional.</li> <li>For Policy Sets with large numbers of included Policies you should use a spreadsheet (CSV file) to manage effects (parameterized or effect <code>overrides</code>), <code>parameters</code> and optional <code>nonComplianceMessages</code>. We recommend the CSV approach for Policy Sets with more than 10 included Policies.</li> <li>EPAC continues to support deprecated elements <code>initiativeId</code>, <code>initiativeName</code> and <code>ignoreBranch</code>, Consider using their replacements <code>policySetId</code>, <code>policySetName</code> and <code>enforcementMode</code> instead.</li> </ul> <p>Note</p> <p>The tree is not required to be balanced. The number of levels is not restricted; however, anything beyond 3 levels is unnecessary in real scenarios and would be difficult to read and manage as the depth increases.</p>"},{"location":"policy-assignments/#tree-structure","title":"Tree Structure","text":""},{"location":"policy-assignments/#assignment-naming-element","title":"Assignment Naming Element","text":"<p>Each Assignment is required to have a <code>name</code> which is used in it's resource id. EPAC also requires a <code>displayName</code>. The <code>description</code> is optional. For the allowed location assignment you specify the component with:</p> <pre><code>\"assignment\": {\n    \"name\": \"allowed-locations\",\n    \"displayName\": \"Allowed Locations\",\n    \"description\": \"Sets the allowed locations.\"\n},\n</code></pre> <p>Multiple <code>assignment</code> naming components in a tree branch are string concatenated for each of the three fields.</p> <p>Note</p> <p>Azure has a limit of 24 characters for the concatenated <code>name</code> string. EPAC displays an error if this limit is exceeded.</p>"},{"location":"policy-assignments/#assigning-policy-sets-or-policies","title":"Assigning Policy Sets or Policies","text":"<p>Each assignment assigns either a Policy or Policy Set. In EPAC this is done with a <code>definitionEntry</code> or a <code>definitionEntryList</code>. Exactly one occurrence must exist in any collated tree branch. For each entry, you need to specify one of the following:</p> <ul> <li><code>policyName</code> - custom Policy managed by EPAC. Specifying just the name allows EPAC to inject the correct definition scope.</li> <li><code>policySetName</code> - custom Policy Set managed by EPAC.</li> <li><code>policyId</code> - resource id for builtin Policy.</li> <li><code>policySetId</code> - resource id for builtin Policy Set.</li> </ul> <p><code>displayName</code> is an optional field to document the entry if the Policy name is a GUID. Builtin Policies and Policy Sets use a GUID.</p> <pre><code>\"definitionEntry\": {\n    \"policySetName\": \"general-allowed-locations-policy-set\",\n    \"displayName\": \"Use this if the Policy name is a GUID\"\n},\n</code></pre> <p>Using <code>definitionEntryList</code> allows you to save on copy/paste tree branches. Without it, the number of branches would need to be duplicated as many times as the list has entries.</p> <p>Each entry in the list creates an Assignment at each leave of the tree. Since assignments must have unique names at a specific scope, the Assignment naming component must be amended for each list entry. In this sub-component you can decide if you want to concatenate the string by appending or prepending them by specifying <code>append</code> boolean value.</p> <pre><code>\"definitionEntryList\": [\n    {\n        \"policySetId\": \"/providers/Microsoft.Authorization/policySetDefinitions/1f3afdf9-d0c9-4c3d-847f-89da613e70a8\",\n        \"displayName\": \"Azure Security Benchmark\",\n        \"assignment\": {\n            \"append\": true,\n            \"name\": \"asb\",\n            \"displayName\": \"Azure Security Benchmark\",\n            \"description\": \"Azure Security Benchmark Initiative. \"\n        }\n    },\n    {\n        \"policySetId\": \"/providers/Microsoft.Authorization/policySetDefinitions/179d1daa-458f-4e47-8086-2a68d0d6c38f\",\n        \"displayName\": \"NIST SP 800-53 Rev. 5\",\n        \"assignment\": {\n            \"append\": true,\n            \"name\": \"nist-800-53-r5\",\n            \"displayName\": \"NIST SP 800-53 Rev. 5\",\n            \"description\": \"NIST SP 800-53 Rev. 5 Initiative.\"\n        }\n    }\n],\n</code></pre> <p>In the above example one of the children (leaf node) has the following Assignment name.</p> <pre><code>\"assignment\": {\n    \"name\": \"pr-\",\n    \"displayName\": \"Prod \",\n    \"description\": \"Prod Environment controls enforcement with \"\n},\n</code></pre> <p>This example generates two assignments at the \"prod\" leaf per scope:</p> <ul> <li>/providers/Microsoft.Management/managementGroups/Contoso-Prod/providers/Microsoft.Authorization/policyAssignments/pr-asb</li> <li><code>displayName</code> = \"Prod Azure Security Benchmark\"</li> <li><code>description</code> = \"Prod Environment controls enforcement with Azure Security Benchmark Initiative.\"</li> <li>/providers/Microsoft.Management/managementGroups/Contoso-Prod/providers/Microsoft.Authorization/policyAssignments/pr-nist-800-53-r5</li> <li><code>displayName</code> = \"Prod NIST SP 800-53 Rev. 5\"</li> <li><code>description</code> = \"Prod Environment controls enforcement with NIST SP 800-53 Rev. 5 Initiative.\"</li> </ul>"},{"location":"policy-assignments/#assignment-scopes-and-excluded-scopes","title":"Assignment scopes and excluded scopes","text":"<p><code>scope</code> is required exactly once in each tree branch. Excluded scopes (<code>notScope</code>) are cumulative from <code>global-settings.json</code> and the entire tree branch; however, once a scope is defined <code>notScope</code> may not be defined at any child node.</p> <p>Both <code>scope</code> and <code>notScope</code> are specific to an EPAC Environment using the pacSelector name, e.g., <code>epac-dev</code> and <code>tenant</code>.</p> <pre><code>\"scope\": {\n    \"epac-dev\": [\n        \"/providers/Microsoft.Management/managementGroups/Epac-Prod\"\n    ],\n    \"tenant\": [\n        \"/providers/Microsoft.Management/managementGroups/Contoso-Prod\"\n        \"/providers/Microsoft.Management/managementGroups/Contoso-Prod2\"\n    ]\n}\n</code></pre> <p><code>notScope</code> works the same. In addition <code>\"*\"</code> means all EPAC Environments which is most often used for <code>resourceGroupPatterns</code>.</p> <pre><code>\"notScope\": {\n    \"*\": [\n        \"/resourceGroupPatterns/excluded-rg*\"\n    ],\n    \"tenant\": [\n        \"/providers/Microsoft.Management/managementGroups/Epac\",\n        \"/providers/Microsoft.Management/managementGroups/\"\n    ]\n}\n</code></pre>"},{"location":"policy-assignments/#managed-identities-and-role-assignments","title":"Managed Identities and role assignments","text":"<p>Policies with a <code>DeployIfNotExists</code> or <code>Modify</code> effect need a Managed Identity (MI) and role assignments to execute remediation task. EPAC calculates the necessary role assignments based on the <code>roleDefinitionIds</code> in the Policy definition. By default EPAC uses a system-assigned Manged Identity. The team maintaining EPAC recommend system-assigned identities; however, your organization may have role assignment reasons to use user-assigned Managed Identities.</p>"},{"location":"policy-assignments/#defining-managedidentitylocations","title":"Defining <code>managedIdentityLocations</code>","text":"<p>Policy assignments requiring a Managed Identity (system-assigned or user-assigned) require a location <code>managedIdentityLocations</code>. You must specify the location based on EPAC Environment or use <code>\"*\"</code> to use the same location for all of the EPAC Environments. You can specify them in <code>global-settings.jsonc</code> or at any node in the tree. The last (closest to the leaf node) is the one chosen if multiple <code>managedIdentityLocations</code> entries are encountered in a tree branch.</p> <pre><code>\"managedIdentityLocations\": {\n    \"*\": \"eastus2\"\n},\n</code></pre>"},{"location":"policy-assignments/#defining-optional-additionalroleassignments","title":"Defining optional <code>additionalRoleAssignments</code>","text":"<p>In some scenarios you will need <code>additionalRoleAssignments</code>; e.g., for diagnostics settings to Event Hubs, the target resource might be in a different Management Group and therefore the Managed Identity requires additional role assignments. You must specify the <code>additionalRoleAssignments</code> based on EPAC Environment or use <code>\"*\"</code>to use the same <code>additionalRoleAssignments</code>for all of the EPAC Environments.</p> <pre><code>\"additionalRoleAssignments\": {\n    \"*\": [\n        {\n            \"roleDefinitionId\": \"/providers/microsoft.authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c\",\n            \"scope\": \"/subscriptions/&lt;id&gt;/resourceGroups/&lt;example&gt;\"\n        }\n    ]\n},\n</code></pre>"},{"location":"policy-assignments/#user-assigned-managed-identities","title":"User-assigned Managed Identities","text":"<p>Azure Policy can use a user-defined Managed Identity and EPAC allows you to use this functionality (new in version 7.0). You must specify the user-defined Managed Identity based on EPAC Environment or use <code>\"*\"</code> to use the same identity for all of the EPAC Environments (only possible in single tenant scenarios). Within each EPAC Environment entry, you can specify just the URI string indicating to use the same identity even if we are using a <code>definitionEntryList</code>, or in the case of a <code>definitionEntryList</code> can assign a different identity based on the definitionEntryList by specifying a matching <code>policyName</code>, <code>policyId</code>, <code>policySetName</code> or <code>policySetId</code>.</p> <pre><code>\"userAssignedIdentity\": {\n    // For single definitionEntry or when using the same identity for all definitions being assigned\n    \"tenant1\": \"/subscriptions/id/resourceGroups/testRG/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity-1\",\n    \"tenant2\": [\n      // differentiate by assigned definition\n      {\n          \"policySetName\": \"somePolicySetName\",\n          \"identity\": \"/subscriptions/id/resourceGroups/testRG/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity-2\"\n      },\n      {\n          \"policySetId\": \"somePolicySetId\",\n          \"identity\": \"/subscriptions/id/resourceGroups/testRG/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity-3\"\n      }\n    ]\n}\n</code></pre> <p>Note</p> <p>The rest (below) of the node components are optional.</p>"},{"location":"policy-assignments/#defining-parameters-with-json","title":"Defining <code>parameters</code> with JSON","text":"<p><code>parameters</code> have a simple JSON structure. You do not need the additional <code>value</code> indirection Azure requests (EPAC will inject that indirection).</p> <pre><code>\"parameters\": {\n  \"aksClusterContainersAllowedImagesExcludedNamespaces\": [\n    \"kube-system\",\n    \"gatekeeper-system\",\n    \"azure-arc\"\n  ],\n  \"kvKeysActiveMaximumNumberOfDays\": 90,\n  \"publicNetworkAccessShouldBeDisabledForContainerRegistriesEffect\": \"Audit\",\n  \"mysqlDisablePublicNetworkAccessEffect\": \"Deny\",\n  \"kvRsaCryptographyMinimumKeySizeEffect\": \"Deny\",\n},\n</code></pre> <p>Too enable <code>definitionEntryList</code>, parameters not present in the Policy or Policy Set definition are quietly ignored.</p>"},{"location":"policy-assignments/#defining-overrides-with-json","title":"Defining <code>overrides</code> with JSON","text":"<p><code>overrides</code> are in the same format as documented by Azure. They are  cumulative in each tree branch. The <code>selectors</code> element is only used for Assignments of Policy Sets. They are not valid for Assignments of a single Policy.</p> <p>If using <code>definitionEntryList</code>, you must add the <code>policyName</code>, <code>policyId</code>, <code>policySetName</code> or <code>policySetId</code> as used in the <code>definitionEntryList</code> item.</p> <pre><code>\"overrides\": [\n    {\n        \"policySetId\": \"/providers/Microsoft.Authorization/policySetDefinitions/179d1daa-458f-4e47-8086-2a68d0d6c38f\",\n        \"kind\": \"policyEffect\",\n        \"value\": \"AuditIfNotExists\",\n        \"selectors\": [\n            {\n                \"kind\": \"policyDefinitionReferenceId\",\n                \"in\": [\n                    \"331e8ea8-378a-410f-a2e5-ae22f38bb0da\",\n                    \"385f5831-96d4-41db-9a3c-cd3af78aaae6\"\n                ]\n            }\n        ]\n    },\n    {\n        \"policySetId\": \"/providers/Microsoft.Authorization/policySetDefinitions/179d1daa-458f-4e47-8086-2a68d0d6c38f\",\n        \"kind\": \"policyEffect\",\n        \"value\": \"AuditIfNotExists\",\n        \"selectors\": [\n            {\n                \"kind\": \"policyDefinitionReferenceId\",\n                \"in\": [\n                    \"cddd188c-4b82-4c48-a19d-ddf74ee66a01\",\n                    \"3cf2ab00-13f1-4d0c-8971-2ac904541a7e\"\n                ]\n            }\n        ]\n    }\n],\n</code></pre>"},{"location":"policy-assignments/#defining-noncompliancemessages-with-json","title":"Defining <code>nonComplianceMessages</code> with JSON","text":"<p>Assign a non-compliance message to the assignment, or individual non-compliance messages if the assignment is for an Policy Set. This value is an array of objects - each containing a message, and in the case of an initiative a policyDefinitionReferenceId. See this link for details.</p> <p>If you use single <code>definitionEntry</code>, place them normally. If you use a <code>definitionEntryList</code> place them in the respective list entry.</p> <pre><code>\"nonComplianceMessages\": [\n    {\n        \"message\": \"Update main message\"\n        // Default nonComplianceMessage\n    },\n    {\n        \"message\": \"Individual policy message\",\n        // Policy specific nonComplianceMessage. You must include the policyDefinitionReferenceId as defined in the Policy Set.\n        \"policyDefinitionReferenceId\": \"ASC_DeployAzureDefenderForSqlAdvancedThreatProtectionWindowsAgent\"\n    }\n],\n</code></pre>"},{"location":"policy-assignments/#defining-parameters-overrides-and-noncompliancemessages-with-a-csv-file","title":"Defining <code>parameters</code>, <code>overrides</code> and <code>nonComplianceMessages</code> with a CSV file","text":"<p>Assigning single or multiple security and compliance focused Policy Sets (Initiatives), such as Azure Security Benchmark, NIST 800-53 r5, PCI, NIST 800-171, etc, with just JSON parameters becomes very complex fast. Add to this the complexity of overriding the effect if it is not surfaced as a parameter in the Policy Set using <code>overrides</code>. Finally, adding the optional <code>nonComplianceMessages</code> further increases the complexity.</p> <p>To address the problem of reading and maintaining hundreds or thousands of JSON lines, EPAC can use the content of a spreadsheet (CSV) to create <code>parameters</code>, <code>overrides</code> and optionally <code>nonComplianceMessages</code> for a single Policy assignment <code>definitionEntry</code> or multiple Policy definitions (<code>definitionEntryList</code>).</p> <p>Note</p> <p>This approach is best for very large Policy Sets such as Azure Security Benchmark, NIST 800-53, etc. Smaller Policy Sets should still be handled with JSON <code>parameters</code>, <code>overrides</code> and <code>nonComplianceMessages</code>.</p> <p>Start by generating documentation for one or more of those Policy Sets, then modify the effect and parameter columns for each type of environment types you will use. In the example header below the infrastructure environments prod, test, dev, and sandbox are used as prefixes to the columns for Effect and Parameters respectively. Optionally you can add a column for <code>nonComplianceMessages</code>. If you want to switch from JSON to CSV, you can generate this CSV file frm your already deployed Assignment(s).</p> <p>The CSV file generated contains the following headers/columns:</p> <p><code>name,referencePath,policyType,category,displayName,description,groupNames,policySets,allowedEffects,allowedOverrides,prodEffect,testEffect,devEffect,sandboxEffect,prodParameters,testParameters,devParameters,sandboxParameters,nonComplianceMessages</code></p> <p>Column explanations:</p> <ul> <li><code>name</code> is the name of the policyDefinition referenced by the Policy Sets being assigned.</li> <li><code>referencePath</code> is only used if the Policy is used more than once in at least one of the Policy Sets to disambiguate them. The format is <code>&lt;policySetName&gt;//&lt;policyDefinitionReferenceId&gt;</code>.</li> <li><code>policyType</code>,<code>category</code>,<code>displayName</code>,<code>description</code>,<code>groupNames</code>,<code>policySets</code>,<code>allowedEffects</code> are optional and not used for deployment planning. They assist you in filling out the <code>&lt;env&gt;Effect</code> columns.</li> <li><code>&lt;env&gt;Effect</code> columns must contain one of the allowedValues or allowedOverrides values. You define which scopes define each type of environment and what short name you give the environment type to use as a column prefix.</li> <li><code>&lt;env&gt;Parameters</code> can contain additional parameters. You can also specify such parameters in JSON. EPAC will use the union of all parameters.</li> <li><code>nonComplianceMessages</code> column is optional. The documentation script does not generate this columns.</li> </ul> <p>EPAC will find the effect parameter name for each Policy in each Policy Set and use them. If no effect parameter is defined by the Policy Set, EPAC will use <code>overrides</code> to set the effect. EPAC will generate the <code>policyDefinitionReferenceId</code> for <code>nonComplianceMessages</code>.</p> <p>After building the spreadsheet, you must reference the CSV file and the column prefix in each tree branch. <code>parameterFile</code> can be overridden in a child node; however, it is often used once per tree branch and defined adjacent to the <code>'definitionEntry</code> or <code>definitionEntryList</code>.</p> <pre><code>\"parameterFile\": \"security-baseline-parameters.csv\",\n\"definitionEntryList\": [\n    {\n        \"policySetName\": \"1f3afdf9-d0c9-4c3d-847f-89da613e70a8\",\n        \"displayName\": \"Azure Security Benchmark\",\n        \"assignment\": {\n            \"append\": true,\n            \"name\": \"asb\",\n            \"displayName\": \"Azure Security Benchmark\",\n            \"description\": \"Azure Security Benchmark Initiative. \"\n        }\n    },\n    {\n        \"policySetName\": \"179d1daa-458f-4e47-8086-2a68d0d6c38f\",\n        \"displayName\": \"NIST SP 800-53 Rev. 5\",\n        \"assignment\": {\n            \"append\": true,\n            \"name\": \"nist-800-53-r5\",\n            \"displayName\": \"NIST SP 800-53 Rev. 5\",\n            \"description\": \"NIST SP 800-53 Rev. 5 Initiative.\"\n        }\n    }\n],\n</code></pre> <p>In the child nodes specifying the scope(s) specify which column prefix to use for selecting the CSV columns with <code>parameterSelector</code>. The actual prefix names have no meaning; they only need to match between the JSON below and the CSV file.</p> <pre><code>{\n    \"nodeName\": \"Prod/\",\n    \"assignment\": {\n        \"name\": \"pr-\",\n        \"displayName\": \"Prod \",\n        \"description\": \"Prod Environment controls enforcement with initiative \"\n    },\n    \"parameterSelector\": \"prod\",\n    \"scope\": {\n        \"epac-dev\": [\n            \"/providers/Microsoft.Management/managementGroups/Epac-Mg-Prod\"\n        ],\n        \"tenant\": [\n            \"/providers/Microsoft.Management/managementGroups/Contoso-Prod\"\n        ]\n    }\n},\n</code></pre> <p>The element <code>nonComplianceMessageColumn</code> may appear anywhere in the tree. Definitions at a child override the previous setting. If no <code>nonComplianceMessageColumn</code> is specified, the spreadsheet is not used for the (optional) <code>nonComplianceMessages</code>.</p> <pre><code>{\n    \"nodeName\": \"Prod/\",\n    \"assignment\": {\n        \"name\": \"pr-\",\n        \"displayName\": \"Prod \",\n        \"description\": \"Prod Environment controls enforcement with initiative \"\n    },\n    \"parameterSelector\": \"prod\",\n    \"nonComplianceMessageColumn\": \"nonComplianceMessages\"\n    \"scope\": {\n        \"epac-dev\": [\n            \"/providers/Microsoft.Management/managementGroups/Epac-Mg-Prod\"\n        ],\n        \"tenant\": [\n            \"/providers/Microsoft.Management/managementGroups/Contoso-Prod\"\n        ]\n    }\n},\n</code></pre>"},{"location":"policy-assignments/#defining-resourceselectors","title":"Defining <code>resourceSelectors</code>","text":"<p><code>resourceSelectors</code> may appear anywhere in the tree and are cumulative in any branch. They follow the standard Azure Format.</p> <pre><code>\"resourceSelectors\": [\n    {\n        \"name\": \"SDPRegions\",\n        \"selectors\": [\n            {\n                \"kind\": \"resourceLocation\",\n                \"in\": [ \"eastus\", \"westus\", \"centralus\", \"southcentralus\" ]\n            }\n        ]\n    }\n]\n</code></pre>"},{"location":"policy-assignments/#defining-metadata","title":"Defining <code>metadata</code>","text":"<p><code>metadata</code> is sometimes used to track tickets for changes. Do NOT specify EPAC-reserved elements <code>roles</code> and <code>pacOwnerId</code>. For the final <code>metadata</code> EPAC creates the union of instances in the entire tree branch.</p> <pre><code>\"metadata\": {\n    \"someItem\": \"Lorem Ipsum\"\n}\n</code></pre>"},{"location":"policy-assignments/#defining-enforcementmode","title":"Defining <code>enforcementMode</code>","text":"<p><code>enforcementMode</code> is similar to the deprecated <code>ignoreBranch</code>; it deploys the assignment and sets the assignment to <code>Default</code> or <code>DoNotEnforce</code>. <code>DoNotEnforce</code> allows a what-if analysis. <code>enforcementMode</code> may appear anywhere in the tree. Definitions at a child override the previous setting.</p> <pre><code>\"enforcementMode\": \"DoNotEnforce\",\n</code></pre>"},{"location":"policy-assignments/#example-assignment-files","title":"Example assignment files","text":""},{"location":"policy-assignments/#simple-policy-assignment-allowed-locations","title":"Simple Policy Assignment (Allowed Locations)","text":"<p>In the simple case an assignment is a single assignment or with no difference in <code>assignment</code>, <code>parameters</code>, and <code>definitionEntry</code> across multiple scopes. In many scenarios \"Allowed Locations\" is such a simple Assignment. Such Assignments do not have child nodes, just the root node.</p> <pre><code>{\n  \"nodeName\": \"/root\",\n  \"definitionEntry\": {\n    \"displayName\": \"Allowed Locations Initiative\",\n    \"policySetName\": \"general-allowed-locations-policy-set\"\n  },\n  \"assignment\": {\n    \"name\": \"allowed-locations\",\n    \"displayName\": \"Allowed Locations\",\n    \"description\": \"Sets the allowed locations\"\n  },\n  \"metadata\": {},\n  \"enforcementMode\": \"Default\",\n  \"parameters\": {\n    \"AllowedLocations\": [\n      \"centralus\",\n      \"eastus\",\n      \"eastus2\",\n      \"southcentralus\"\n    ]\n  },\n  \"scope\": {\n    \"epac-dev\": [\n      \"/providers/Microsoft.Management/managementGroups/Epac-Mg-1\"\n    ],\n    \"tenant\": [\n      \"/providers/Microsoft.Management/managementGroups/c\"\n    ]\n  }\n}\n</code></pre> <ul> <li><code>nodeName</code> is required for error messages; it's value is immaterial. EPAC concatenates them in the current tree branch.</li> <li><code>definitionEntry</code> specifies that the custom Policy Set <code>general-allowed-locations-policy-set</code> from our starter kit. <code>displayName</code> has no meaning - it is for readability and in this instance is superfluous.</li> <li><code>assignment</code> fields <code>name</code>, <code>displayName</code> and <code>description</code> are used when creating the assignment.</li> <li>This assignment has no <code>metadata</code>. You don't need an empty collection. EPAC will add <code>pacOwnerId</code> and <code>roles</code> <code>metadata</code>. Do not add them manually.</li> <li>enforcementMode is set to default - it is superfluous.</li> <li><code>parameters</code> are obvious. Note: you don't add the <code>value</code> layer Azure inserts - EPAC takes care of that.</li> <li><code>scope</code>:</li> <li>During Policy resource development (called <code>epac-dev</code>) the Assignment is deployed to an EPAC development Management Group <code>Epac-Mg-1</code>.</li> <li>During Policy prod deployments (<code>tenant</code>-wide), it is deployed to the tenant Management Group <code>Epac-Mg-1</code>.</li> <li>No <code>notScope</code> entries are specified.</li> </ul> <p>If we remove the empty and superfluous entries, we arrive at:</p> <pre><code>{\n  \"nodeName\": \"/root\",\n  \"definitionEntry\": {\n    \"policySetName\": \"general-allowed-locations-policy-set\"\n  },\n  \"assignment\": {\n    \"name\": \"allowed-locations\",\n    \"displayName\": \"Allowed Locations\",\n    \"description\": \"Sets the allowed locations\"\n  },\n  \"parameters\": {\n    \"AllowedLocations\": [\n      \"centralus\",\n      \"eastus\",\n      \"eastus2\",\n      \"southcentralus\"\n    ]\n  },\n  \"scope\": {\n    \"epac-dev\": [\n      \"/providers/Microsoft.Management/managementGroups/Epac-Mg-1\"\n    ],\n    \"tenant\": [\n      \"/providers/Microsoft.Management/managementGroups/c\"\n    ]\n  }\n}\n</code></pre>"},{"location":"policy-assignments/#security-focused-policy-assignment-with-json-parameters","title":"Security-Focused Policy Assignment with JSON parameters","text":"<ul> <li>In the following example we named our root node (<code>nodeName</code>) <code>/security/</code>. Since it is only used in case of error messages produced by EPAC during planning it's actual value doesn't matter as long as it's unique.</li> <li>We use a <code>definitionEntryList</code> to create two assignments at every leaf (six assignments total).</li> <li>For <code>assignment</code> string concatenation we append the strings in the <code>definitionEntryList</code> to the strings in the child nodes. You can see this best when you look at the <code>description</code> string in the child  nodes. It will form a sentence when concatenated by <code>append</code>ing the <code>definitionEntryList</code> <code>assignment</code> field <code>description</code>.</li> <li>The <code>parameters</code> specified in the children are specific to the IaC environment types and their <code>scope</code>. Note: a real assignment would define many more parameters. The set here is abbreviated since the actual set could easily exceed a hundred entries for each of the IaC environments. We'll see in the next example how to simplify large Policy Set parameters with a CSV file.</li> </ul> <pre><code>{\n  \"nodeName\": \"/Security/\",\n  \"definitionEntryList\": [\n    {\n      \"policySetId\": \"/providers/Microsoft.Authorization/policySetDefinitions/1f3afdf9-d0c9-4c3d-847f-89da613e70a8\",\n      \"displayName\": \"Azure Security Benchmark\",\n      \"assignment\": {\n        \"append\": true,\n        \"name\": \"asb\",\n        \"displayName\": \"Azure Security Benchmark\",\n        \"description\": \"Azure Security Benchmark Initiative.\"\n      }\n    },\n    {\n      \"policySetId\": \"/providers/Microsoft.Authorization/policySetDefinitions/179d1daa-458f-4e47-8086-2a68d0d6c38f\",\n      \"displayName\": \"NIST SP 800-53 Rev. 5\",\n      \"assignment\": {\n        \"append\": true,\n        \"name\": \"nist-800-53-r5\",\n        \"displayName\": \"NIST SP 800-53 Rev. 5\",\n        \"description\": \"NIST SP 800-53 Rev. 5 Initiative.\"\n      }\n    }\n  ],\n  \"children\": [\n    {\n      \"nodeName\": \"Prod/\",\n      \"assignment\": {\n        \"name\": \"pr-\",\n        \"displayName\": \"Prod \",\n        \"description\": \"Prod Environment controls enforcement with \"\n      },\n      \"parameters\": {\n        \"classicComputeVMsMonitoringEffect\": \"Deny\",\n        \"disallowPublicBlobAccessEffect\": \"deny\",\n        \"azureCosmosDBAccountsShouldHaveFirewallRulesMonitoringEffect\": \"Deny\",\n        \"allowedContainerImagesInKubernetesClusterEffect\": \"Audit\",\n        \"AllowedHostNetworkingAndPortsInKubernetesClusterEffect\": \"Disabled\",\n        \"clusterProtectionLevelInServiceFabricMonitoringEffect\": \"Deny\",\n      },\n      \"scope\": {\n        \"epac-dev\": [\n          \"/providers/Microsoft.Management/managementGroups/epac-dev-prod\"\n        ],\n        \"tenant\": [\n          \"/providers/Microsoft.Management/managementGroups/Contoso-Prod\"\n        ]\n      }\n    },\n    {\n      \"nodeName\": \"NonProd/\",\n      \"assignment\": {\n        \"name\": \"np-\",\n        \"displayName\": \"NonProd \",\n        \"description\": \"Non Prod Environment controls enforcement with \"\n      },\n      \"parameters\": {\n        \"classicComputeVMsMonitoringEffect\": \"Deny\",\n        \"disallowPublicBlobAccessEffect\": \"deny\",\n        \"azureCosmosDBAccountsShouldHaveFirewallRulesMonitoringEffect\": \"Audit\",\n        \"allowedContainerImagesInKubernetesClusterEffect\": \"Audit\",\n        \"AllowedHostNetworkingAndPortsInKubernetesClusterEffect\": \"Disabled\",\n        \"clusterProtectionLevelInServiceFabricMonitoringEffect\": \"Audit\",\n      },\n      \"scope\": {\n        \"epac-dev\": [\n          \"/providers/Microsoft.Management/managementGroups/epac-dev-nonprod\"\n        ],\n        \"tenant\": [\n          \"/providers/Microsoft.Management/managementGroups/Contoso-nonprod\"\n        ]\n      }\n    },\n    {\n      \"nodeName\": \"Sandbox/\",\n      \"assignment\": {\n        \"name\": \"sbx-\",\n        \"displayName\": \"Sandbox \",\n        \"description\": \"Sandbox Environment controls enforcement with \"\n      },\n      \"parameters\": {\n        \"classicStorageAccountsMonitoringEffect\": \"Deny\",\n        \"allowedServicePortsInKubernetesClusterEffect\": \"Disabled\",\n        \"certificatesValidityPeriodInMonths\": 13,\n        \"AllowedAppArmorProfilesInKubernetesClusterEffect\": \"Disabled\",\n        \"certificatesValidityPeriodMonitoringEffect\": \"disabled\",\n        \"cognitiveServicesAccountsShouldRestrictNetworkAccessMonitoringEffect\": \"Disabled\",\n        \"AllowedCapabilitiesInKubernetesClusterEffect\": \"Disabled\"\n      },\n      \"scope\": {\n        \"epac-dev\": [\n          \"/providers/Microsoft.Management/managementGroups/epac-dev-sandbox\"\n        ],\n        \"tenant\": [\n          \"/providers/Microsoft.Management/managementGroups/Contoso-Sandbox\"\n        ]\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"policy-assignments/#security-focused-policy-assignment-with-csv-file-parameters","title":"Security-Focused Policy Assignment with CSV file parameters","text":"<p>This example is the same as the previous, except we replaced inline JSON parameters with a CSV file and use the column prefixes in the CSV file to select which parameter values we use by:</p> <ul> <li>Setting the file name at the root node with</li> </ul> <p><code>jsonc   \"parameterFile\": \"security-baseline-parameters.csv\",</code></p> <ul> <li>Setting the column prefix with <code>parameterSelector</code> to <code>prod</code>, <code>nonprod</code> and <code>sandbox</code>. For example:</li> </ul> <pre><code>\"parameterSelector\": \"prod\",\n</code></pre> <p>The CSV file is explained above. The entire file is:</p> <pre><code>{\n  \"nodeName\": \"/Security/\",\n  \"parameterFile\": \"security-baseline-parameters.csv\",\n  \"definitionEntryList\": [\n    {\n      \"policySetId\": \"/providers/Microsoft.Authorization/policySetDefinitions/1f3afdf9-d0c9-4c3d-847f-89da613e70a8\",\n      \"displayName\": \"Azure Security Benchmark\",\n      \"assignment\": {\n        \"append\": true,\n        \"name\": \"asb\",\n        \"displayName\": \"Azure Security Benchmark\",\n        \"description\": \"Azure Security Benchmark Initiative.\"\n      }\n    },\n    {\n      \"policySetId\": \"/providers/Microsoft.Authorization/policySetDefinitions/179d1daa-458f-4e47-8086-2a68d0d6c38f\",\n      \"displayName\": \"NIST SP 800-53 Rev. 5\",\n      \"assignment\": {\n        \"append\": true,\n        \"name\": \"nist-800-53-r5\",\n        \"displayName\": \"NIST SP 800-53 Rev. 5\",\n        \"description\": \"NIST SP 800-53 Rev. 5 Initiative.\"\n      }\n    }\n  ],\n  \"children\": [\n    {\n      \"nodeName\": \"Prod/\",\n      \"parameterSelector\": \"prod\",\n      \"assignment\": {\n        \"name\": \"pr-\",\n        \"displayName\": \"Prod \",\n        \"description\": \"Prod Environment controls enforcement with \"\n      },\n      \"scope\": {\n        \"epac-dev\": [\n          \"/providers/Microsoft.Management/managementGroups/epac-dev-prod\"\n        ],\n        \"tenant\": [\n          \"/providers/Microsoft.Management/managementGroups/Contoso-Prod\"\n        ]\n      }\n    },\n    {\n      \"nodeName\": \"NonProd/\",\n      \"parameterSelector\": \"nonprod\",\n      \"assignment\": {\n        \"name\": \"np-\",\n        \"displayName\": \"NonProd \",\n        \"description\": \"Non Prod Environment controls enforcement with \"\n      },\n      \"scope\": {\n        \"epac-dev\": [\n          \"/providers/Microsoft.Management/managementGroups/epac-dev-nonprod\"\n        ],\n        \"tenant\": [\n          \"/providers/Microsoft.Management/managementGroups/Contoso-nonprod\"\n        ]\n      }\n    },\n    {\n      \"nodeName\": \"Sandbox/\",\n      \"parameterSelector\": \"sandbox\",\n      \"assignment\": {\n        \"name\": \"sbx-\",\n        \"displayName\": \"Sandbox \",\n        \"description\": \"Sandbox Environment controls enforcement with \"\n      },\n      \"scope\": {\n        \"epac-dev\": [\n          \"/providers/Microsoft.Management/managementGroups/epac-dev-sandbox\"\n        ],\n        \"tenant\": [\n          \"/providers/Microsoft.Management/managementGroups/Contoso-Sandbox\"\n        ]\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"policy-assignments/#inverted-policy-assignment-tag-inheritance-and-required-tags","title":"Inverted Policy Assignment (Tag Inheritance and Required Tags)","text":"<p>As mentioned above sometimes it is advantageous (to reduce the number of repetitions) to turn a definition on its head:</p> <ul> <li>Common <code>parameters</code>, <code>scope</code>, <code>definitionEntryList</code> (with two Policies) at the root (<code>nodeName</code> is <code>/Tags/</code>).</li> <li>Start of the <code>assignment</code> strings (<code>append</code> is defaulted to <code>false</code>). Again look at description which will be a concatenated sentence.</li> <li>The children define the <code>tagName</code> parameter and the second part of the strings for <code>assignment</code>. The set of <code>parameters</code> is the union of the root node and the child node.</li> <li>This creates six Assignments (number of Policies assigned times number of children).</li> </ul> <pre><code>{\n  \"nodeName\": \"/Tags/\",\n  \"parameters\": {\n    \"excludedRG\": [\n      \"synapseworkspace-managedrg-*\",\n      \"databricks-rg-*\",\n      \"managed*\"\n    ]\n  },\n  \"scope\": {\n      \"epac-dev\": [\n          \"/providers/Microsoft.Management/managementGroups/epac-dev-mg-1\"\n      ],\n      \"tenant\": [\n          \"/providers/Microsoft.Management/managementGroups/Contoso-Root\"\n      ]\n  },\n  \"definitionEntryList\": [\n      {\n          \"policyName\": \"rg-required-tag-dynamic-notscope\",\n          \"assignment\": {\n              \"name\": \"rgtag-\",\n              \"displayName\": \"Require Tag on Resource Group - \",\n              \"description\": \"Require Tag for Resource Groups when any resource group (not listed in in excludedRg) is created or updated - \"\n          }\n      },\n      {\n          \"policyName\": \"resources-inherit-rg-tag-dynamic-notscope\",\n          \"assignment\": {\n              \"name\": \"taginh-\",\n              \"displayName\": \"Inherit Tag from Resource Group - \",\n              \"description\": \"Modify Tag to comply with governance goal of enforcing Tags by inheriting Tags from RG - \"\n          }\n      }\n  ],\n  \"children\": [\n      {\n          \"nodeName\": \"AppName\",\n          \"assignment\": {\n              \"name\": \"AppName\",\n              \"displayName\": \"AppName\",\n              \"description\": \"AppName.\"\n          },\n          \"parameters\": {\n              \"tagName\": \"AppName\"\n          }\n      },\n      {\n          \"nodeName\": \"Environment\",\n          \"assignment\": {\n              \"name\": \"Environment\",\n              \"displayName\": \"Environment\",\n              \"description\": \"Environment.\"\n          },\n          \"parameters\": {\n              \"tagName\": \"Environment\"\n          }\n      },\n      {\n          \"nodeName\": \"Project\",\n          \"assignment\": {\n              \"name\": \"Project\",\n              \"displayName\": \"Project\",\n              \"description\": \"Project.\"\n          },\n          \"parameters\": {\n              \"tagName\": \"Project\"\n          }\n      }\n  ]\n}\n</code></pre>"},{"location":"policy-assignments/#non-compliance-messages-in-a-policy-definition-assignment","title":"Non-Compliance Messages in a Policy Definition Assignment","text":"<p>An example of a policy assignment for a single policy definition with a default non-compliance message.</p> <pre><code>{\n    \"nodeName\": \"test\",\n    \"scope\": {\n        \"issue48\": [\n            \"/providers/Microsoft.Management/managementGroups/issue48\"\n        ]\n    },\n    \"assignment\": {\n        \"displayName\": \"Audit virtual machines without disaster recovery configured\",\n        \"description\": null,\n        \"name\": \"46332f3a51cb4bf2b4de78a7\"\n    },\n    \"definitionEntry\": {\n        \"policyName\": \"0015ea4d-51ff-4ce3-8d8c-f3f8f0179a56\" // Single policy definition\n    },\n    \"nonComplianceMessages\": [ // Array of nonComplianceMessages\n        {\n            \"Message\": \"Update non-compliance message\" // Default nonComplianceMessage\n        }\n    ],\n    \"parameters\": {}\n}\n</code></pre>"},{"location":"policy-assignments/#non-compliance-messages-in-a-policy-set-definition-assignment","title":"Non-Compliance Messages in a Policy Set Definition Assignment","text":"<p>An example of a policy assignment for a policy set definition with a default non-compliance message and a policy specific non-compliance message.</p> <pre><code>{\n    \"nodeName\": \"test\",\n    \"scope\": {\n        \"issue48\": [\n            \"/providers/Microsoft.Management/managementGroups/issue48\"\n        ]\n    },\n    \"assignment\": {\n        \"displayName\": \"Configure Azure Defender for SQL agents on virtual machines\",\n        \"description\": null,\n        \"name\": \"39a366e6\"\n    },\n    \"definitionEntry\": {\n        \"initiativeName\": \"39a366e6-fdde-4f41-bbf8-3757f46d1611\" // Policy set definition\n    },\n    \"nonComplianceMessages\": [ // Array of nonComplianceMessages\n        {\n            \"message\": \"Update main message\" // Default nonComplianceMessage\n        },\n        {\n            \"message\": \"Individual policy message\", // Policy specific nonComplianceMessage. You must include the policyDefinitionReferenceId as defined in the initiative.\n            \"policyDefinitionReferenceId\": \"ASC_DeployAzureDefenderForSqlAdvancedThreatProtectionWindowsAgent\"\n        }\n    ],\n    \"parameters\": {}\n}\n</code></pre>"},{"location":"policy-assignments/#non-compliance-messages-in-a-policy-set-definition-assignment-with-a-definitionentrylist","title":"Non-Compliance Messages in a Policy Set Definition Assignment with a <code>definitionEntryList</code>","text":"<p>An example of how to use a non-compliance message when using a <code>definitionEntryList</code> list in the assignment.</p> <pre><code>{\n    \"nodeName\": \"test\",\n    \"scope\": {\n        \"issue48\": [\n            \"/providers/Microsoft.Management/managementGroups/issue48\"\n        ]\n    },\n    \"definitionEntryList\": [\n        {\n            \"initiativeName\": \"62329546-775b-4a3d-a4cb-eb4bb990d2c0\",\n            \"assignment\": {\n                \"displayName\": \"Flow logs should be configured and enabled for every network security group\",\n                \"description\": \"Audit for network security groups to verify if flow logs are configured and if flow log status is enabled. Enabling flow logs allows to log information about IP traffic flowing through network security group. It can be used for optimizing network flows, monitoring throughput, verifying compliance, detecting intrusions and more.\",\n                \"name\": \"62329546\"\n            },\n            \"nonComplianceMessages\": [ // nonComplianceMessages must be in the definitionEntryList object for each policy/initiative deployed.\n                {\n                    \"message\": \"Updated Default message\"\n                },\n                {\n                    \"message\": \"Individual policy message\",\n                    \"policyDefinitionReferenceId\": \"NetworkWatcherFlowLog_Enabled_Audit\"\n                }\n            ]\n        },\n        {\n            \"initiativeName\": \"cb5e1e90-7c33-491c-a15b-24885c915752\",\n            \"assignment\": {\n                \"displayName\": \"Enable Azure Cosmos DB throughput policy\",\n                \"description\": \"Enable throughput control for Azure Cosmos DB resources in the specified scope (Management group, Subscription or resource group). Takes max throughput as parameter. Use this policy to help enforce throughput control via the resource provider.\",\n                \"name\": \"cb5e1e90\"\n            }\n        }\n    ],\n    \"parameters\": {\n        \"throughputMax\": 400\n    }\n}\n</code></pre>"},{"location":"policy-assignments/#reading-list","title":"Reading List","text":"<ul> <li>Setup DevOps Environment .</li> <li>Create a source repository and import the source code from this repository.</li> <li>Select the desired state strategy</li> <li>Define your deployment environment in <code>global-settings.jsonc</code>.</li> <li>Build your CI/CD pipeline using a starter kit.</li> <li>Optional: generate a starting point for the <code>Definitions</code> folders:</li> <li>Extract existing Policy resources from an environment.</li> <li>Import Policies from the Cloud Adoption Framework.</li> <li>Add custom Policies.</li> <li>Add custom Policy Sets.</li> <li>Create Policy Assignments.</li> <li>Import Policies from the Cloud Adoption Framework.</li> <li>Manage Policy Exemptions.</li> <li>Document your deployments.</li> <li>Execute operational tasks.</li> </ul>"},{"location":"policy-definitions/","title":"Policies","text":""},{"location":"policy-definitions/#policy-definition-files","title":"Policy Definition Files","text":"<p>Policy definition files are managed within the the folder <code>policyDefintions</code> under <code>Definitions</code>.  The Policy definition files are structured based on the official Azure Policy definition structure published by Microsoft. There are numerous definition samples available on Microsoft's GitHub repository for azure-policy.</p> <p>Note</p> <p>When authoring Policy and Policy definitions, check out the Maximum count of Azure Policy objects</p> <p>The names of the definition JSON files don't matter, the Policy and Policy Set definitions are registered based on the <code>name</code> attribute. The solution also allows the use of JSON with comments by using <code>.jsonc</code> instead of <code>.json</code> for the file extension.</p>"},{"location":"policy-definitions/#recommendations","title":"Recommendations","text":"<ul> <li><code>\"name\"</code> is required and should be unique. It can be a GUID or a unique short name.</li> <li><code>\"category\"</code> should be one of the standard ones defined in built-in Policies.</li> <li>Do not specify an <code>id</code>. The solution will ignore it.</li> <li>Make the <code>effect</code> parameterized. Always use the parameter name <code>effect</code>.</li> <li>Whenever feasible, provide a <code>defaultValue</code> for parameters, especially for the <code>effect</code> parameter.</li> <li>Policy aliases are used by Azure Policy to refer to resource type properties in the <code>if</code> condition and in <code>existenceCondition</code>: https://docs.microsoft.com/en-us/azure/governance/policy/concepts/definition-structure#aliases.</li> </ul>"},{"location":"policy-definitions/#example","title":"Example","text":"<pre><code>{\n    \"name\": \"Newly created GUID\",\n    \"properties\": {\n        \"displayName\": \"Policy Display Name\",\n        \"policyType\": \"Custom\",\n        \"mode\": \"All\",\n        \"description\": \"Policy Description\",\n        \"metadata\": {\n            \"version\": \"1.0.0\",\n            \"category\": \"Your Category\"\n        },\n        \"parameters\": {\n            \"YourParameter\": {\n                \"type\": \"String\",\n                \"metadata\": {\n                    \"displayName\": \"YourParameter\",\n                    \"description\": \"Your Parameter Description\"\n                }\n            }\n        },\n        \"policyRule\": {\n            \"if\": {\n                \"Insert Logic Here\"\n            },\n            \"then\": {\n                \"effect\": \"Audit, Deny, Modify, etc.\",\n                \"details\": {\n                    \"roleDefinitionIds\": [],\n                    \"operations\": []\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"policy-definitions/#reading-list","title":"Reading List","text":"<ul> <li>Setup DevOps Environment .</li> <li>Create a source repository and import the source code from this repository.</li> <li>Select the desired state strategy</li> <li>Define your deployment environment in <code>global-settings.jsonc</code>.</li> <li>Build your CI/CD pipeline using a starter kit.</li> <li>Optional: generate a starting point for the <code>Definitions</code> folders:</li> <li>Extract existing Policy resources from an environment.</li> <li>Import Policies from the Cloud Adoption Framework.</li> <li>Add custom Policies.</li> <li>Add custom Policy Sets.</li> <li>Create Policy Assignments.</li> <li>Import Policies from the Cloud Adoption Framework.</li> <li>Manage Policy Exemptions.</li> <li>Document your deployments.</li> <li>Execute operational tasks.</li> </ul>"},{"location":"policy-exemptions/","title":"Exemptions","text":""},{"location":"policy-exemptions/#exemption-files","title":"Exemption Files","text":"<p>Exemptions can be defined as JSON or CSV files (we recommend that you use CSV files). The names of the definition files don't matter. If multiple files exists in a folder, the lists from all the files are added together.</p> <p>The pacEnvironment (see global-settings.jsonc) is represented with a folder structure under the folder policyExemptions, such as epac-dev, tenant, ... A missing folder indicates that the pacEnvironment's Exemptions are not managed by this solution. To extract existing exemptions, the operations script Get-AzExemptions.ps1 can be used to generate JSON and CSV files. The output may be used to start the Exemption definitions.</p> <p>A typical folder structure might look like this:</p> <pre><code>Definitions\n        policyExemptions\n                epac-dev\n                        &lt;name&gt;.csv of &lt;name&gt;.json\n                tenant\n                        &lt;name&gt;.csv of &lt;name&gt;.json\n</code></pre>"},{"location":"policy-exemptions/#csv-format","title":"CSV Format","text":"<p>We recommend that you use spreadsheets (<code>.csv</code>). TThe columns must have the following headers:</p> <ul> <li><code>name</code> - unique name.</li> <li><code>displayName</code> - descriptive name displayed on portal.</li> <li><code>exemptionCategory</code> - <code>waiver</code> or <code>mitigated</code>.</li> <li><code>scope</code> - Management Group, subscription, Resource Group or resource.</li> <li><code>assignmentId</code> - fully qualified assignment id.</li> <li><code>policyDefinitionReferenceIds</code> use comma separated list within each cell.</li> <li><code>metadata</code> - valid JSON (see JSON format below)</li> </ul>"},{"location":"policy-exemptions/#json-format","title":"JSON Format","text":"<p><code>name</code>, <code>displayName</code>, <code>exemptionCategory</code>, <code>scope</code> and <code>assignmentId</code> are required fields. The others are optional.</p> <pre><code>{\n    \"exemptions\": [\n        {\n            \"name\": \"Unique name\",\n            \"displayName\": \"Descriptive name displayed on portal\",\n            \"description\": \"More details\",\n            \"exemptionCategory\": \"waiver\",\n            \"scope\": \"/subscriptions/11111111-2222-3333-4444-555555555555\",\n            \"policyAssignmentId\": \"/providers/microsoft.management/managementgroups/contoso-prod/providers/microsoft.authorization/policyassignments/prod-asb\",\n            \"policyDefinitionReferenceIds\": [\n                \"webApplicationFirewallShouldBeEnabledForApplicationGatewayMonitoringEffect\"\n            ],\n            \"metadata\": {\n                \"custom\": \"value\"\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"policy-exemptions/#reading-list","title":"Reading List","text":"<ul> <li>Setup DevOps Environment .</li> <li>Create a source repository and import the source code from this repository.</li> <li>Select the desired state strategy</li> <li>Define your deployment environment in <code>global-settings.jsonc</code>.</li> <li>Build your CI/CD pipeline using a starter kit.</li> <li>Optional: generate a starting point for the <code>Definitions</code> folders:</li> <li>Extract existing Policy resources from an environment.</li> <li>Import Policies from the Cloud Adoption Framework.</li> <li>Add custom Policies.</li> <li>Add custom Policy Sets.</li> <li>Create Policy Assignments.</li> <li>Import Policies from the Cloud Adoption Framework.</li> <li>Manage Policy Exemptions.</li> <li>Document your deployments.</li> <li>Execute operational tasks.</li> </ul>"},{"location":"policy-set-definitions/","title":"Policy Set (Initiative) Definitions","text":""},{"location":"policy-set-definitions/#initiative-policy-set-definition-files","title":"Initiative (Policy Set) Definition Files","text":"<p>Policy Set definition files are managed within the the folder <code>policySetDefinitions</code> under <code>Definitions</code>. The definition files are structured based on the official Azure Initiative definition structure published by Microsoft. There are numerous definition samples available on Microsoft's GitHub repository for azure-policy.</p> <p>Note</p> <p>When authoring Policy or Policy Set definitions, check out the Maximum count of Azure Policy objects</p> <p>The names of the definition JSON files don't matter, the Policy Sets are registered based on the <code>name</code> attribute. The solution also allows the use of JSON with comments by using <code>.jsonc</code> instead of <code>.json</code> for the file extension.</p> <p>Optional: Policy definition groups allow custom Policy Sets to map to different regulatory compliance requirements. These will show up in the regulatory compliance blade in Azure Security Center as if they were built-in. In order to use this, the custom Policy Sets must have both policy definition groups and group names defined.</p> <ul> <li>Policy definition groups must be pulled from a built-in Policy Sets such as the Azure Security Benchmark initiative (Azure Initiative definition structure published by Microsoft). There are numerous definition samples available on Microsoft's GitHub Azure Security Benchmark Code.</li> <li>Policy definition groups can be imported by using <code>importPolicyDefinitionGroups</code>. The following imports the groups from Azure Security Benchmark.</li> </ul> <pre><code>    \"importPolicyDefinitionGroups\": [\n      // built-in Policy Set definition (ASB v3)\n      \"/providers/Microsoft.Authorization/policySetDefinitions/1f3afdf9-d0c9-4c3d-847f-89da613e70a8\"\n    ],\n</code></pre>"},{"location":"policy-set-definitions/#recommendations","title":"Recommendations","text":"<ul> <li><code>\"name\"</code> is required and should be unique. It can be a GUID or a unique short name.</li> <li><code>\"category\"</code> should be one of the standard ones defined in built-in Policies.</li> <li>Custom Policies: use <code>policyDefinitionName</code>. The solution constructs the <code>policyDefinitionId</code> based on the <code>deploymentRootScope</code> in <code>global-settings.jsonc</code>.</li> <li>Builtin Policies: use <code>policyDefinitionId</code>. The solution can constructs the <code>policyDefinitionId</code> from <code>policyDefinitionName</code> for builtin Policies; however using <code>policyDefinitionId</code> is more explicit/cleaner.</li> <li>Do not specify an <code>id</code>. The solution will ignore it.</li> <li>Make  the <code>effects</code> parameterized</li> </ul>"},{"location":"policy-set-definitions/#example","title":"Example","text":"<pre><code>{\n  \"name\": \"Newly created GUID\",\n  \"properties\": {\n    \"displayName\": \"Your Initiative Display Name\",\n    \"description\": \"Initiative Description\",\n    \"metadata\": {\n      \"version\": \"1.0.0\",\n      \"category\": \"Category Name\"\n    },\n    \"policyDefinitionGroups\": [\n      {\n        \"name\": \"Azure_Security_Benchmark_v2.0_NS-1\",\n        \"additionalMetadataId\": \"/providers/Microsoft.PolicyInsights/policyMetadata/Azure_Security_Benchmark_v2.0_NS-1\"\n      }\n    ],\n    \"parameters\": {\n      \"Parameter for policy one\": {\n        \"type\": \"Array\",\n        \"defaultValue\": []\n      },\n      \"Parameter for policy two\": {\n        \"type\": \"string\",\n        \"defaultValue\": []\n      }\n    },\n    \"PolicyDefinitions\": [\n      {\n        \"policyDefinitionReferenceId\": \"Reference to policy number one\",\n        \"policyDefinitionName\": \"Name of Policy Number One\",\n        \"parameters\": {\n          \"Parameter for policy one\": {\n            \"value\": \"[parameters('Parameter for policy one')]\"\n          }\n        }\n      },\n      {\n        \"policyDefinitionReferenceId\": \"Reference to policy number two\",\n        \"policyDefinitionName\": \"Name of Policy Number Two\",\n        \"parameters\": {\n          \"Parameter for policy two\": {\n            \"value\": \"[parameters('Parameter for policy two')]\"\n          }\n        },\n        \"groupNames\": [\n            \"Azure_Security_Benchmark_v2.0_NS-1\"\n        ]\n      },\n      {\n        \"policyDefinitionReferenceId\": \"Reference to policy number two\",\n        \"policyDefinitionId\": \"id of a builtin Policy\",\n        \"parameters\": {\n          \"Parameter for policy two\": {\n            \"value\": \"[parameters('Parameter for policy two')]\"\n          }\n        },\n        \"groupNames\": [\n            \"Azure_Security_Benchmark_v2.0_NS-1\"\n        ]\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"policy-set-definitions/#reading-list","title":"Reading List","text":"<ul> <li>Setup DevOps Environment .</li> <li>Create a source repository and import the source code from this repository.</li> <li>Select the desired state strategy</li> <li>Define your deployment environment in <code>global-settings.jsonc</code>.</li> <li>Build your CI/CD pipeline using a starter kit.</li> <li>Optional: generate a starting point for the <code>Definitions</code> folders:</li> <li>Extract existing Policy resources from an environment.</li> <li>Import Policies from the Cloud Adoption Framework.</li> <li>Add custom Policies.</li> <li>Add custom Policy Sets.</li> <li>Create Policy Assignments.</li> <li>Import Policies from the Cloud Adoption Framework.</li> <li>Manage Policy Exemptions.</li> <li>Document your deployments.</li> <li>Execute operational tasks.</li> </ul>"},{"location":"powershell-module/","title":"PowerShell Module","text":"<p>Warning</p> <p>PowerShell module is available and is still being tested. If you encounter any issues please raise these in the GitHub project.</p> <p>Enterprise Policy as Code is now available as a PowerShell module. To install follow the instructions below.</p> <pre><code>Install-Module EnterprisePolicyAsCode\nImport-Module EnterprisePolicyAsCode\n</code></pre>"},{"location":"powershell-module/#known-issues","title":"Known Issues","text":"<ul> <li><code>Build-DeploymentPlans</code> - use the -outputFolder parameter otherwise it will create an Output folder in the module folder</li> <li><code>Deploy-RolesPlan</code> - use the -inputFolder parameter and specify the folder in the previous step</li> <li><code>Deploy-PolicyPlan</code> - use the -inputFolder parameter and specify the folder in the previous step</li> </ul>"}]}